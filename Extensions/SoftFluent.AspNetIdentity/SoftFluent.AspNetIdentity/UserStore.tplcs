//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:[%=TemplateProducer.EnvironmentVersion%]
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// [%=Producer.GetSignature()%]
[%
//System.Diagnostics.Debugger.Launch();
//System.Diagnostics.Debugger.Break();

var IdentityUser = TemplateProducer.IdentityUser;
var IdentityUserClaim = TemplateProducer.IdentityUserClaim;
var IdentityUserLogin = TemplateProducer.IdentityUserLogin;
var IdentityRole = TemplateProducer.IdentityRole;

string userTypeName = IdentityUser.Entity.ClrFullTypeName;
string userKeyTypeName = IdentityUser.KeyTypeName;

string roleTypeName = IdentityRole != null ? IdentityRole.Entity.ClrFullTypeName : null; 
string roleKeyTypeName = IdentityRole != null ? IdentityRole.KeyTypeName : null; 

string loginTypeName = IdentityUserLogin != null ? IdentityUserLogin.Entity.ClrFullTypeName : null; 
string loginSetTypeName = IdentityUserLogin != null ? IdentityUserLogin.Entity.Set.ClrFullTypeName : null; 
string claimTypeName = IdentityUserClaim != null ? IdentityUserClaim.Entity.ClrFullTypeName : null; 
string claimSetTypeName = IdentityUserClaim != null ? IdentityUserClaim.Entity.Set.ClrFullTypeName : null; 

Func<Method, string> CallMethod = method => 
{
    if(method == null)
        throw new System.ArgumentNullException("method");

    switch(method.MethodType)
    {
        case CodeFluent.Model.Code.MethodType.SetLoad:
        case CodeFluent.Model.Code.MethodType.SetBodySnippet:
        case CodeFluent.Model.Code.MethodType.SetSnippet:
        case CodeFluent.Model.Code.MethodType.Count:
        case CodeFluent.Model.Code.MethodType.Delete:
            return method.Entity.Set.ClrFullTypeName + "." + method.Name;

        default:
            return method.Entity.ClrFullTypeName + "." + method.Name;        
    }

};

Action<bool, string> WriteIf = (condition, str) => 
{
    if(condition)
    {
        Writer.Write(str);
    }
};

Action<bool, string> WriteInterface = (condition, str) => 
{
    if(condition)
    {
        Writer.WriteLine(",");
        Writer.Write("        ");
        Writer.Write(str);
    }
};

Func<string> WriteRoleNotFound = () =>
{
    if(TemplateProducer.ProjectMessages.RoleNotFoundMessage == null)
    {
        return "string.Format(\"Role '{0}' does not exist.\", roleName)";
    }
    else
    {
        string result = Project.DefaultNamespace + ".Resources.Manager.GetStringWithDefault(";
        result += "\"" + TemplateProducer.ProjectMessages.RoleNotFoundMessage.Name + "\"";
        result += ", ";
        result += "\"" + TemplateProducer.ProjectMessages.RoleNotFoundMessage.Value + "\"";
        result += ", new object[] { roleName })";
        return result;
    }
};
%]
using System;
using System.Threading;

namespace [%=TemplateProducer.Namespace%]
{
    public partial class UserStore : 
        Microsoft.AspNet.Identity.IUserStore<[%=userTypeName%]>[% 
        WriteInterface(TemplateProducer.CanImplementQueryableUserStore, string.Format("Microsoft.AspNet.Identity.IQueryableUserStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementPasswordStore, string.Format("Microsoft.AspNet.Identity.IUserPasswordStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementSecurityStampStore, string.Format("Microsoft.AspNet.Identity.IUserSecurityStampStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementRoleStore, string.Format("Microsoft.AspNet.Identity.IUserRoleStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementLoginStore, string.Format("Microsoft.AspNet.Identity.IUserLoginStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementLockoutStore, string.Format("Microsoft.AspNet.Identity.IUserLockoutStore<{0}, string>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementClaimsStore, string.Format("Microsoft.AspNet.Identity.IUserClaimStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementEmailStore, string.Format("Microsoft.AspNet.Identity.IUserEmailStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementPhoneNumberStore, string.Format("Microsoft.AspNet.Identity.IUserPhoneNumberStore<{0}>", userTypeName));
        WriteInterface(TemplateProducer.CanImplementTwoFactorStore, string.Format("Microsoft.AspNet.Identity.IUserTwoFactorStore<{0}, string>", userTypeName));

        if (TemplateProducer.CanImplementGenericInterfaces)
        {
            WriteInterface(TemplateProducer.CanImplementGenericInterfaces, string.Format("Microsoft.AspNet.Identity.IUserStore<{0}, {1}>", userTypeName, userKeyTypeName));
            WriteInterface(TemplateProducer.CanImplementQueryableUserStore, string.Format("Microsoft.AspNet.Identity.IQueryableUserStore<{0}, {1}>", userTypeName, userKeyTypeName));
            WriteInterface(TemplateProducer.CanImplementPasswordStore, string.Format("Microsoft.AspNet.Identity.IUserPasswordStore<{0}, {1}>", userTypeName, userKeyTypeName));
            WriteInterface(TemplateProducer.CanImplementSecurityStampStore, string.Format("Microsoft.AspNet.Identity.IUserSecurityStampStore<{0}, {1}>", userTypeName, userKeyTypeName));
            WriteInterface(TemplateProducer.CanImplementRoleStore, string.Format("Microsoft.AspNet.Identity.IUserRoleStore<{0}, {1}>", userTypeName, userKeyTypeName));
            WriteInterface(TemplateProducer.CanImplementLoginStore, string.Format("Microsoft.AspNet.Identity.IUserLoginStore<{0}, {1}>", userTypeName, userKeyTypeName));
            WriteInterface(TemplateProducer.CanImplementLockoutStore, string.Format("Microsoft.AspNet.Identity.IUserLockoutStore<{0}, {1}>", userTypeName, userKeyTypeName));
            WriteInterface(TemplateProducer.CanImplementClaimsStore, string.Format("Microsoft.AspNet.Identity.IUserClaimStore<{0}, {1}>", userTypeName, userKeyTypeName));
            WriteInterface(TemplateProducer.CanImplementEmailStore, string.Format("Microsoft.AspNet.Identity.IUserEmailStore<{0}, {1}>", userTypeName, userKeyTypeName));
            WriteInterface(TemplateProducer.CanImplementPhoneNumberStore, string.Format("Microsoft.AspNet.Identity.IUserPhoneNumberStore<{0}, {1}>", userTypeName, userKeyTypeName));
            WriteInterface(TemplateProducer.CanImplementTwoFactorStore, string.Format("Microsoft.AspNet.Identity.IUserTwoFactorStore<{0}, {1}>", userTypeName, userKeyTypeName));
        }
        %]
    {
        private bool _disposed = false;

        public virtual System.Threading.Tasks.Task CreateAsync([%=userTypeName%] user)
        {
            return CreateAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task CreateAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null) 
            {
                throw new System.ArgumentNullException("user");
            }
            [% if (IdentityUser.CreationDateProperty != null) { %]
            if(user.[%= IdentityUser.CreationDateProperty.Name %] == CodeFluent.Runtime.CodeFluentPersistence.DefaultDateTimeValue)
            {
                user.[%= IdentityUser.CreationDateProperty.Name %] = System.DateTime.UtcNow;
            }
            [% }%]
            return System.Threading.Tasks.Task.FromResult(user.Save());
        }

        public virtual System.Threading.Tasks.Task UpdateAsync([%=userTypeName%] user)
        {
            return UpdateAsync(user, CancellationToken.None); 
        }

        public virtual System.Threading.Tasks.Task UpdateAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null) 
            {
                throw new System.ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.Save());
        }

        public virtual System.Threading.Tasks.Task DeleteAsync([%=userTypeName%] user)
        {
            return DeleteAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task DeleteAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null) 
            {
                throw new System.ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.Delete());
        }

        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindByIdAsync(string userId)
        {
            return FindByIdAsync(userId, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindByIdAsync(string userId, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            return System.Threading.Tasks.Task.FromResult([%=TemplateProducer.IdentityUser.Entity.ClrFullTypeName%].LoadByEntityKey(userId));
        }
        [% if(TemplateProducer.CanImplementGenericInterfaces) { %]
        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindByIdAsync([%=userKeyTypeName%] userId)
        {
            return FindByIdAsync(userId, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindByIdAsync([%=userKeyTypeName%] userId, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            return System.Threading.Tasks.Task.FromResult([%=TemplateProducer.IdentityUser.Entity.ClrFullTypeName%].[%=TemplateProducer.IdentityUser.LoadByKeyMethodName%](userId));
        }
        [% } %]
        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindByNameAsync(string userName)
        {
            return FindByNameAsync(userName, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindByNameAsync(string userName, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            return System.Threading.Tasks.Task.FromResult([%=CallMethod(IdentityUser.LoadByUserNameMethod)%](userName));
        }
[% if(TemplateProducer.CanImplementPasswordStore) { %]

        public virtual System.Threading.Tasks.Task SetPasswordHashAsync([%=userTypeName%] user, string passwordHash)
        {
            return SetPasswordHashAsync(user, passwordHash, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task SetPasswordHashAsync([%=userTypeName%] user, string passwordHash, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.PasswordProperty.Name%] = passwordHash;
            [% if(IdentityUser.LastPasswordChangeDateProperty != null) { 
            %]user.[%=IdentityUser.LastPasswordChangeDateProperty.Name%] = System.DateTime.UtcNow;[% 
            } %]
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<string> GetPasswordHashAsync([%=userTypeName%] user)
        {
            return GetPasswordHashAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<string> GetPasswordHashAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.PasswordProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task<bool> HasPasswordAsync([%=userTypeName%] user)
        {
            return HasPasswordAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<bool> HasPasswordAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.PasswordProperty.Name%] != null);
        }
[% } if(TemplateProducer.CanImplementSecurityStampStore) { %]

        public virtual System.Threading.Tasks.Task SetSecurityStampAsync([%=userTypeName%] user, string stamp)
        {
            return SetSecurityStampAsync(user, stamp, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task SetSecurityStampAsync([%=userTypeName%] user, string stamp, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [% if(IdentityUser.LastProfileUpdateDateProperty != null) { 
            %]user.[%=IdentityUser.LastProfileUpdateDateProperty.Name%] = System.DateTime.UtcNow;[% 
            } %]
            user.[%=IdentityUser.SecurityStampProperty.Name%] = stamp;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<string> GetSecurityStampAsync([%=userTypeName%] user)
        {
            return GetSecurityStampAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<string> GetSecurityStampAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.SecurityStampProperty.Name%]);
        }        
[% } if(TemplateProducer.CanImplementLockoutStore) { %]

        public virtual System.Threading.Tasks.Task<System.DateTimeOffset> GetLockoutEndDateAsync([%=userTypeName%] user)
        {
            return GetLockoutEndDateAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<System.DateTimeOffset> GetLockoutEndDateAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [% if(IdentityUser.LockoutEndDateProperty.IsModelNullable) { %]
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.LockoutEndDateProperty.Name%].HasValue ? new System.DateTimeOffset(System.DateTime.SpecifyKind(user.[%=IdentityUser.LockoutEndDateProperty.Name%].Value, System.DateTimeKind.Utc)) : new System.DateTimeOffset());
            [% } else { %]
            return System.Threading.Tasks.Task.FromResult(new System.DateTimeOffset(System.DateTime.SpecifyKind(user.[%=IdentityUser.LockoutEndDateProperty.Name%], System.DateTimeKind.Utc)));
            [% } %]
        }

        public virtual System.Threading.Tasks.Task SetLockoutEndDateAsync([%=userTypeName%] user, System.DateTimeOffset lockoutEnd)
        {
            return SetLockoutEndDateAsync(user, lockoutEnd, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task SetLockoutEndDateAsync([%=userTypeName%] user, System.DateTimeOffset lockoutEnd, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            if (lockoutEnd == System.DateTimeOffset.MinValue)
            {
                user.[%=IdentityUser.LockoutEndDateProperty.Name%] = [%= IdentityUser.LockoutEndDateProperty.IsModelNullable ? "null" : "System.DateTime.MinValue" %];
            }
            else
            {
                user.[%=IdentityUser.LockoutEndDateProperty.Name%] = lockoutEnd.UtcDateTime;
            }

            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<int> IncrementAccessFailedCountAsync([%=userTypeName%] user)
        {
            return IncrementAccessFailedCountAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<int> IncrementAccessFailedCountAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [% if(IdentityUser.FailedPasswordAttemptWindowStartProperty != null) { %]
            if(user.[%=IdentityUser.FailedPasswordAttemptCountProperty.Name%] <= 0)
            {
                user.[%=IdentityUser.FailedPasswordAttemptWindowStartProperty.Name%] = System.DateTime.UtcNow;
            }

            [% } %]
            return System.Threading.Tasks.Task.FromResult(++user.[%=IdentityUser.FailedPasswordAttemptCountProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task ResetAccessFailedCountAsync([%=userTypeName%] user)
        {
            return ResetAccessFailedCountAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task ResetAccessFailedCountAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.FailedPasswordAttemptCountProperty.Name%] = 0;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<int> GetAccessFailedCountAsync([%=userTypeName%] user)
        {
            return GetAccessFailedCountAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<int> GetAccessFailedCountAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.FailedPasswordAttemptCountProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task<bool> GetLockoutEnabledAsync([%=userTypeName%] user)
        {
            return GetLockoutEnabledAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<bool> GetLockoutEnabledAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.LockoutEnabledProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task SetLockoutEnabledAsync([%=userTypeName%] user, bool enabled)
        {
            return SetLockoutEnabledAsync(user, enabled, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task SetLockoutEnabledAsync([%=userTypeName%] user, bool enabled, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.LockoutEnabledProperty.Name%] = true;
            return System.Threading.Tasks.Task.FromResult(0);
        }
[% } if(TemplateProducer.CanImplementEmailStore) { %]

        public virtual System.Threading.Tasks.Task SetEmailAsync([%=userTypeName%] user, string email)
        {
            return SetEmailAsync(user, email, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task SetEmailAsync([%=userTypeName%] user, string email, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.EmailProperty.Name%] = email;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<string> GetEmailAsync([%=userTypeName%] user)
        {
            return GetEmailAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<string> GetEmailAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.EmailProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task<bool> GetEmailConfirmedAsync([%=userTypeName%] user)
        {
            return GetEmailConfirmedAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<bool> GetEmailConfirmedAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [% if(IdentityUser.EmailConfirmedProperty != null) { %]
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.EmailConfirmedProperty.Name%]);
            [% } else { %]
            return System.Threading.Tasks.Task.FromResult(true);
            [% } %]
        }

        public virtual System.Threading.Tasks.Task SetEmailConfirmedAsync([%=userTypeName%] user, bool confirmed)
        {
            return SetEmailConfirmedAsync(user, confirmed, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task SetEmailConfirmedAsync([%=userTypeName%] user, bool confirmed, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [% if(IdentityUser.EmailConfirmedProperty != null) { %]
            user.[%=IdentityUser.EmailConfirmedProperty.Name%] = confirmed;
            [% } %]
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindByEmailAsync(string email)
        {
            return FindByEmailAsync(email, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindByEmailAsync(string email, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            [% if(IdentityUser.LoadByEmailMethod == null) { %]
            throw new System.InvalidOperationException();
            [% } else { %]
            return System.Threading.Tasks.Task.FromResult([%=CallMethod(IdentityUser.LoadByEmailMethod)%](email));
            [% } %]
        }
[% } if(TemplateProducer.CanImplementPhoneNumberStore) { %]

        public virtual System.Threading.Tasks.Task SetPhoneNumberAsync([%=userTypeName%] user, string phoneNumber)
        {
            return SetPhoneNumberAsync(user, phoneNumber, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task SetPhoneNumberAsync([%=userTypeName%] user, string phoneNumber, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.PhoneNumberProperty.Name%] = phoneNumber;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<string> GetPhoneNumberAsync([%=userTypeName%] user)
        {
            return GetPhoneNumberAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<string> GetPhoneNumberAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.PhoneNumberProperty.Name%]);
        }

        public virtual System.Threading.Tasks.Task<bool> GetPhoneNumberConfirmedAsync([%=userTypeName%] user)
        {
            return GetPhoneNumberConfirmedAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<bool> GetPhoneNumberConfirmedAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }
            [% if(IdentityUser.PhoneNumberConfirmedProperty != null) { %]
            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.PhoneNumberConfirmedProperty.Name%]);
            [% } else { %]
            return System.Threading.Tasks.Task.FromResult(true);
            [% } %]
        }

        public virtual System.Threading.Tasks.Task SetPhoneNumberConfirmedAsync([%=userTypeName%] user, bool confirmed)
        {
            return SetPhoneNumberConfirmedAsync(user, confirmed, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task SetPhoneNumberConfirmedAsync([%=userTypeName%] user, bool confirmed, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }
            [% if(IdentityUser.PhoneNumberConfirmedProperty != null) { %]
            user.[%=IdentityUser.PhoneNumberConfirmedProperty.Name%] = confirmed;
            [% } %]
            return System.Threading.Tasks.Task.FromResult(0);
        }
[% } if(TemplateProducer.CanImplementTwoFactorStore) { %]

        public virtual System.Threading.Tasks.Task SetTwoFactorEnabledAsync([%=userTypeName%] user, bool enabled)
        {
            return SetTwoFactorEnabledAsync(user, enabled);
        }

        public virtual System.Threading.Tasks.Task SetTwoFactorEnabledAsync([%=userTypeName%] user, bool enabled, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            user.[%=IdentityUser.TwoFactorEnabledProperty.Name%] = enabled;
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<bool> GetTwoFactorEnabledAsync([%=userTypeName%] user)
        {
            return GetTwoFactorEnabledAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<bool> GetTwoFactorEnabledAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.TwoFactorEnabledProperty.Name%]);
        }
[% } if(TemplateProducer.CanImplementRoleStore) { %]

        public virtual System.Threading.Tasks.Task AddToRoleAsync([%=userTypeName%] user, string roleName)
        {
            return AddToRoleAsync(user, roleName, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task AddToRoleAsync([%=userTypeName%] user, string roleName, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [%=roleTypeName%] role = [%=CallMethod(IdentityRole.LoadByNameMethod)%](roleName);
            if (role == null)
            {
                throw new System.ArgumentException([%=WriteRoleNotFound()%], "roleName");
            }

            role.[%=IdentityRole.UsersProperty.Name%].Add(user);
            role.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task RemoveFromRoleAsync([%=userTypeName%] user, string roleName)
        {
            return RemoveFromRoleAsync(user, roleName, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task RemoveFromRoleAsync([%=userTypeName%] user, string roleName, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [%=roleTypeName%] role = [%=CallMethod(IdentityRole.LoadByNameMethod)%](roleName);
            if (role == null)
            {
                throw new System.ArgumentException([%=WriteRoleNotFound()%], "roleName");
            }

            if (role.[%=IdentityRole.UsersProperty.Name%].Remove(user))
            {
                role.Save();
            }

            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> GetRolesAsync([%=userTypeName%] user)
        {
            return GetRolesAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> GetRolesAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            System.Collections.Generic.IList<string> result = new System.Collections.Generic.List<string>();
            foreach (Microsoft.AspNet.Identity.IRole role in user.[%=IdentityUser.RolesProperty.Name%])
            {
                result.Add(role.Name);
            }

            return System.Threading.Tasks.Task.FromResult(result);
        }

        public virtual System.Threading.Tasks.Task<bool> IsInRoleAsync([%=userTypeName%] user, string roleName)
        {
            return IsInRoleAsync(user, roleName);
        }

        public virtual System.Threading.Tasks.Task<bool> IsInRoleAsync([%=userTypeName%] user, string roleName, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [%=roleTypeName%] role = [%=CallMethod(IdentityRole.LoadByNameMethod)%](roleName);
            if (role == null)
            {
                throw new System.ArgumentException([%=WriteRoleNotFound()%], "roleName");
            }

            return System.Threading.Tasks.Task.FromResult(user.[%=IdentityUser.RolesProperty.Name%].Contains(role));
        }
[% } if(TemplateProducer.CanImplementLoginStore) { %]

        public virtual System.Threading.Tasks.Task AddLoginAsync([%=userTypeName%] user, Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo)
        {
            return AddLoginAsync(user, userLoginInfo, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task AddLoginAsync([%=userTypeName%] user, Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }
            if (userLoginInfo == null)
            {
                throw new ArgumentNullException("userLoginInfo");
            }

            [%=loginTypeName%] login = new [%=loginTypeName%]();
            login.[%=IdentityUserLogin.UserProperty.Name%] = user;
            login.[%=IdentityUserLogin.ProviderKeyProperty.Name%] = userLoginInfo.ProviderKey;
            [% if(IdentityUserLogin.ProviderNameProperty != null) { %]
            login.[%=IdentityUserLogin.ProviderNameProperty.Name%] = userLoginInfo.LoginProvider;
            [% } %]
            login.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task RemoveLoginAsync([%=userTypeName%] user, Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo)
        {
            return RemoveLoginAsync(user, userLoginInfo, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task RemoveLoginAsync([%=userTypeName%] user, Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }
            if (userLoginInfo == null)
            {
                throw new ArgumentNullException("userLoginInfo");
            }

            [% if (IdentityUserLogin.DeleteByUserLoginInfoMethod != null && IdentityUserLogin.DeleteByUserLoginInfoMethod.Parameters.Count == 2) {
            %]return System.Threading.Tasks.Task.FromResult([%=CallMethod(IdentityUserLogin.DeleteByUserLoginInfoMethod)%](user, userLoginInfo.ProviderKey));[% 
            } else if (IdentityUserLogin.DeleteByUserLoginInfoMethod != null && IdentityUserLogin.DeleteByUserLoginInfoMethod.Parameters.Count == 3) {
            %]return System.Threading.Tasks.Task.FromResult([%=CallMethod(IdentityUserLogin.DeleteByUserLoginInfoMethod)%](user, userLoginInfo.ProviderKey, userLoginInfo.LoginProvider));[% 
            } else { %]throw new System.InvalidOperationException();[% } %]
        }

        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.AspNet.Identity.UserLoginInfo>> GetLoginsAsync([%=userTypeName%] user)
        {
            return GetLoginsAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.AspNet.Identity.UserLoginInfo>> GetLoginsAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            System.Collections.Generic.IList<Microsoft.AspNet.Identity.UserLoginInfo> result = new System.Collections.Generic.List<Microsoft.AspNet.Identity.UserLoginInfo>();
            [%=loginSetTypeName%] userLogins = user.[%=IdentityUser.LoginsProperty.Name%];
            foreach([%=loginTypeName%] userLogin in userLogins)
            {
                [% if(IdentityUserLogin.ProviderNameProperty == null) { %]
                Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo = new Microsoft.AspNet.Identity.UserLoginInfo(null, userLogin.[%=IdentityUserLogin.ProviderKeyProperty.Name%]);
                [% } else { %]
                Microsoft.AspNet.Identity.UserLoginInfo userLoginInfo = new Microsoft.AspNet.Identity.UserLoginInfo(userLogin.[%=IdentityUserLogin.ProviderNameProperty.Name%], userLogin.[%=IdentityUserLogin.ProviderKeyProperty.Name%]);
                [% } %]
                result.Add(userLoginInfo);
            }
            
            return System.Threading.Tasks.Task.FromResult(result);
        }

        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindAsync(Microsoft.AspNet.Identity.UserLoginInfo login)
        {
            return FindAsync(login, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<[%=userTypeName%]> FindAsync(Microsoft.AspNet.Identity.UserLoginInfo login, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            [% if(IdentityUser.LoadByUserLoginInfoMethod == null) { %]
            throw new System.InvalidOperationException();
            [% } else { %]
            return System.Threading.Tasks.Task.FromResult([%=CallMethod(IdentityUser.LoadByUserLoginInfoMethod)%](login.ProviderKey[%if(IdentityUser.LoadByUserLoginInfoMethod.Parameters.Count > 1) {%], login.LoginProvider[%}%]));
            [% } %]            
        }
[% } if(TemplateProducer.CanImplementClaimsStore) { 
    Func<string, string> ToClaimArguments = (argumentName) => 
    {
        string result = null;
        result += argumentName + "." + IdentityUserClaim.TypeProperty.Name;
        result += ", " + argumentName + "." + IdentityUserClaim.ValueProperty.Name;
        result += ", " + (IdentityUserClaim.ValueTypeProperty != null ? argumentName + "." + IdentityUserClaim.ValueTypeProperty.Name : "null");
        result += ", " + (IdentityUserClaim.IssuerProperty != null ? argumentName + "." + IdentityUserClaim.IssuerProperty.Name : "null");
        result += ", " + (IdentityUserClaim.OriginalIssuerProperty != null ? argumentName + "." + IdentityUserClaim.OriginalIssuerProperty.Name : "null");
        
        return result;
    };

    Func<string> CallDeleteClaimsMethod = () =>
    {
        if (IdentityUserClaim.DeleteClaimsMethod == null)
            return "throw new System.InvalidOperationException()";

        string result = CallMethod(IdentityUserClaim.DeleteClaimsMethod) + "(";
        bool firstParameter = true;
        foreach (var parameter in IdentityUserClaim.DeleteClaimsMethod.Parameters)
        {
            string parameterText = null;
            if (parameter.ProjectProperty == IdentityUserClaim.UserProperty)
            {
                parameterText = "user";
            }
            else if (parameter.ProjectProperty == IdentityUserClaim.TypeProperty)
            {
                parameterText = "claim." + IdentityUserClaim.TypeProperty.Name;
            }
            else if (parameter.ProjectProperty == IdentityUserClaim.ValueProperty)
            {
                parameterText = "claim." + IdentityUserClaim.ValueProperty.Name;
            }
            else if (parameter.ProjectProperty == IdentityUserClaim.ValueTypeProperty)
            {
                parameterText = "claim." + IdentityUserClaim.ValueTypeProperty.Name;
            }
            else if (parameter.ProjectProperty == IdentityUserClaim.IssuerProperty)
            {
                parameterText = "claim." + IdentityUserClaim.IssuerProperty.Name;
            }
            else if (parameter.ProjectProperty == IdentityUserClaim.OriginalIssuerProperty)
            {
                parameterText = "claim." + IdentityUserClaim.OriginalIssuerProperty.Name;
            }
            else
            {
                continue;
            }

            if (!firstParameter)
            {
                parameterText = ", " + parameterText;
            }
            else
            {
                firstParameter = false;
            }

            result += parameterText;
        }

        return result + ")";
    };
%]

        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>> GetClaimsAsync([%=userTypeName%] user)
        {
            return GetClaimsAsync(user, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>> GetClaimsAsync([%=userTypeName%] user, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            System.Collections.Generic.IList<System.Security.Claims.Claim> result = new System.Collections.Generic.List<System.Security.Claims.Claim>();
            [%=claimSetTypeName%] userClaims = user.[%=IdentityUser.ClaimsProperty.Name%];
            foreach([%=claimTypeName%] userClaim in userClaims)
            {
                System.Security.Claims.Claim claim = new System.Security.Claims.Claim([%=ToClaimArguments("userClaim")%]);
                result.Add(claim);
            }
            
            return System.Threading.Tasks.Task.FromResult(result);
        }

        public virtual System.Threading.Tasks.Task AddClaimAsync([%=userTypeName%] user, System.Security.Claims.Claim claim)
        {
            return AddClaimAsync(user, claim, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task AddClaimAsync([%=userTypeName%] user, System.Security.Claims.Claim claim, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [%=claimTypeName%] userClaim = new [%=claimTypeName%]();
            userClaim.[%=IdentityUserClaim.UserProperty.Name%] = user;
            userClaim.[%=IdentityUserClaim.TypeProperty.Name%] = claim.Type;
            userClaim.[%=IdentityUserClaim.ValueProperty.Name%] = claim.Value;
            [%if (IdentityUserClaim.IssuerProperty != null) { %]
            userClaim.[%=IdentityUserClaim.IssuerProperty.Name%] = claim.Issuer;
            [% } if (IdentityUserClaim.OriginalIssuerProperty != null) { %]
            userClaim.[%=IdentityUserClaim.OriginalIssuerProperty.Name%] = claim.OriginalIssuer;
            [% } if (IdentityUserClaim.ValueTypeProperty != null) { %]
            userClaim.[%=IdentityUserClaim.ValueTypeProperty.Name%] = claim.ValueType;
            [% } %]
            
            userClaim.Save();
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public virtual System.Threading.Tasks.Task RemoveClaimAsync([%=userTypeName%] user, System.Security.Claims.Claim claim)
        {
            return RemoveClaimAsync(user, claim, CancellationToken.None);
        }

        public virtual System.Threading.Tasks.Task RemoveClaimAsync([%=userTypeName%] user, System.Security.Claims.Claim claim, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            ThrowIfDisposed();
            if (user == null)
            {
                throw new ArgumentNullException("user");
            }

            [%=CallDeleteClaimsMethod()%];
            return System.Threading.Tasks.Task.FromResult(0);
        }
[% } if (TemplateProducer.CanImplementQueryableUserStore) { %]

        public virtual System.Linq.IQueryable<[%=userTypeName%]> Users 
        { 
            get
            {
                return System.Linq.Queryable.AsQueryable([%=CallMethod(IdentityUser.LoadAllMethod)%]());
            }
        }
        [% } %]
        
        public virtual void Dispose()
        {
            _disposed = true;
        }
                
        protected virtual void ThrowIfDisposed()
        {
            if (_disposed)
            {
                throw new ObjectDisposedException(GetType().Name);
            }
        }
    }
}