//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoftFluent.Json.NET
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Monday, 23 February 2015 11:33.
    // Build:1.0.61214.0803
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0803")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, Name={Name}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    [Newtonsoft.Json.JsonObjectAttribute(MemberSerialization=Newtonsoft.Json.MemberSerialization.OptIn)]
    public partial class Campaign : System.ICloneable, System.IComparable, System.IComparable<SoftFluent.Json.NET.Campaign>, CodeFluent.Runtime.ICodeFluentCollectionEntity<string>, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<SoftFluent.Json.NET.Campaign>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private byte[] _rowVersion;
        
        private int _id = -1;
        
        private string _name = default(string);
        
        private SoftFluent.Json.NET.CampaignStateType _state = SoftFluent.Json.NET.CampaignStateType.Conceived;
        
        private int _customerId = -1;
        
        [System.NonSerializedAttribute()]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        private SoftFluent.Json.NET.Customer _customer = null;
        
        [System.NonSerializedAttribute()]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        private SoftFluent.Json.NET.ProductCollection _products;
        
        private string _productListString = default(string);
        
        private decimal _price = CodeFluentPersistence.DefaultDecimalValue;
        
        private decimal _priceAllTaxIncluded = CodeFluentPersistence.DefaultDecimalValue;
        
        private decimal _discountRate = CodeFluentPersistence.DefaultDecimalValue;
        
        private System.DateTime _conceptionDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private System.DateTime _addressedDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private System.DateTime _propositionDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private System.DateTime _confirmationDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        // Snippet method 'OnGetProductListStringCS'
public void OnGetProductListString()
        {
            bool firstProduct = true;
            _productListString = string.Empty;
            foreach (Product product in this.Products)
            {
                if (!firstProduct)
                {
                    _productListString += ", ";
                }
                _productListString += product.Advertisement;
                firstProduct = false;
            }
        }
        
        public Campaign()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                return this.Id.ToString();
            }
            set
            {
                this.Id = ((int)(ConvertUtilities.ChangeType(value, typeof(int), -1)));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.Name;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        [System.ComponentModel.DataObjectFieldAttribute(false, true)]
        [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.ByteArrayConverter))]
        [Newtonsoft.Json.JsonPropertyAttribute()]
        public byte[] RowVersion
        {
            get
            {
                return this._rowVersion;
            }
            set
            {
                if (((value != null) 
                            && (value.Length == 0)))
                {
                    value = null;
                }
                this._rowVersion = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RowVersion"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((int)(-1)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        [Newtonsoft.Json.JsonPropertyAttribute()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Id"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [Newtonsoft.Json.JsonPropertyAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<string>.Default.Equals(value, this._name) == true))
                {
                    return;
                }
                string oldKey = this._name;
                this._name = value;
                try
                {
                    this.OnCollectionKeyChanged(oldKey);
                }
                catch (System.ArgumentException )
                {
                    this._name = oldKey;
                    return;
                }
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Name"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(SoftFluent.Json.NET.CampaignStateType))]
        [Newtonsoft.Json.JsonPropertyAttribute()]
        public SoftFluent.Json.NET.CampaignStateType State
        {
            get
            {
                return this._state;
            }
            set
            {
                this._state = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("State"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        [Newtonsoft.Json.JsonPropertyAttribute()]
        public int CustomerId
        {
            get
            {
                if (((this._customerId == -1) 
                            && (this._customer != null)))
                {
                    this._customerId = this._customer.Id;
                }
                return this._customerId;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.CustomerId) == true))
                {
                    return;
                }
                this._customer = null;
                this._customerId = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Customer"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CustomerId"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public SoftFluent.Json.NET.Customer Customer
        {
            get
            {
                if ((this._customer == null))
                {
                    this._customer = SoftFluent.Json.NET.Customer.Load(this._customerId);
                }
                return this._customer;
            }
            set
            {
                this._customerId = -1;
                this._customer = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Customer"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CustomerId"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonIgnoreAttribute()]
        public SoftFluent.Json.NET.ProductCollection Products
        {
            get
            {
                if ((this._products == null))
                {
                    if (((this.Id == -1) 
                                || (this.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) == true)))
                    {
                        this._products = new SoftFluent.Json.NET.ProductCollection(this, null, null, null);
                        return this._products;
                    }
                    this._products = SoftFluent.Json.NET.ProductCollection.LoadByCampaign(this);
                }
                return this._products;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        [Newtonsoft.Json.JsonPropertyAttribute()]
        public string ProductListString
        {
            get
            {
                this.OnGetProductListString();
                return this._productListString;
            }
            set
            {
                this._productListString = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ProductListString"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        [Newtonsoft.Json.JsonPropertyAttribute()]
        public decimal Price
        {
            get
            {
                return this._price;
            }
            set
            {
                this._price = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Price"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        [Newtonsoft.Json.JsonPropertyAttribute()]
        public decimal PriceAllTaxIncluded
        {
            get
            {
                return this._priceAllTaxIncluded;
            }
            set
            {
                this._priceAllTaxIncluded = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("PriceAllTaxIncluded"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(decimal))]
        [Newtonsoft.Json.JsonPropertyAttribute()]
        public decimal DiscountRate
        {
            get
            {
                return this._discountRate;
            }
            set
            {
                this._discountRate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("DiscountRate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        [Newtonsoft.Json.JsonPropertyAttribute()]
        public System.DateTime ConceptionDate
        {
            get
            {
                return this._conceptionDate;
            }
            set
            {
                this._conceptionDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ConceptionDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        [Newtonsoft.Json.JsonPropertyAttribute()]
        public System.DateTime AddressedDate
        {
            get
            {
                return this._addressedDate;
            }
            set
            {
                this._addressedDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("AddressedDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        [Newtonsoft.Json.JsonPropertyAttribute()]
        public System.DateTime PropositionDate
        {
            get
            {
                return this._propositionDate;
            }
            set
            {
                this._propositionDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("PropositionDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        [Newtonsoft.Json.JsonPropertyAttribute()]
        public System.DateTime ConfirmationDate
        {
            get
            {
                return this._confirmationDate;
            }
            set
            {
                this._confirmationDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ConfirmationDate"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        string CodeFluent.Runtime.Utilities.IKeyable<System.String>.Key
        {
            get
            {
                return this.Name;
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.Created) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        [field:System.NonSerializedAttribute()]
        public event System.EventHandler<CodeFluent.Runtime.Utilities.KeyChangedEventArgs<string>> KeyChanged;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(SoftFluent.Json.NET.Campaign campaign)
        {
            if ((campaign == null))
            {
                return false;
            }
            if ((this.Id == -1))
            {
                return base.Equals(campaign);
            }
            return (this.Id.Equals(campaign.Id) == true);
        }
        
        public override int GetHashCode()
        {
            return this._id;
        }
        
        public override bool Equals(object obj)
        {
            SoftFluent.Json.NET.Campaign campaign = null;
			campaign = obj as SoftFluent.Json.NET.Campaign;
            return this.Equals(campaign);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            SoftFluent.Json.NET.Campaign campaign = null;
campaign = value as SoftFluent.Json.NET.Campaign;
            if ((campaign == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(campaign);
            return localCompareTo;
        }
        
        public virtual int CompareTo(SoftFluent.Json.NET.Campaign campaign)
        {
            if ((campaign == null))
            {
                throw new System.ArgumentNullException("campaign");
            }
            int localCompareTo = this.Name.CompareTo(campaign.Name);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = SoftFluent.Json.NET.Resources.Manager.GetStringWithDefault(culture, "SoftFluent.Json.NET.Campaign.ExternalValidate", "Type \'SoftFluent.Json.NET.Campaign\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            if ((this.Name == default(string)))
            {
                string localValidate = SoftFluent.Json.NET.Resources.Manager.GetStringWithDefault(culture, "SoftFluent.Json.NET.Campaign.Name.NullException", "\'Name\' property cannot be set to \'\' for type \'SoftFluent.Json.NET.Campaign\'", null);
                CodeFluentPersistence.AddValidationError(results, localValidate);
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            if ((this.RowVersion == null))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "Delete");
            persistence.AddParameter("@Campaign_Id", this.Id, ((int)(-1)));
            persistence.AddParameter("@_rowVersion", this.RowVersion);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._id = CodeFluentPersistence.GetReaderValue(reader, "Campaign_Id", ((int)(-1)));
                this._name = CodeFluentPersistence.GetReaderValue(reader, "Campaign_Name", ((string)(default(string))));
                this._state = ((SoftFluent.Json.NET.CampaignStateType)(CodeFluentPersistence.GetReaderValueEnum(reader, "Campaign_State", ((SoftFluent.Json.NET.CampaignStateType)(SoftFluent.Json.NET.CampaignStateType.Conceived)))));
                this.CustomerId = CodeFluentPersistence.GetReaderValue(reader, "Campaign_Customer_Id", ((int)(-1)));
                this._price = CodeFluentPersistence.GetReaderValue(reader, "Campaign_Price", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
                this._priceAllTaxIncluded = CodeFluentPersistence.GetReaderValue(reader, "Campaign_PriceAllTaxIncluded", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
                this._discountRate = CodeFluentPersistence.GetReaderValue(reader, "Campaign_DiscountRate", ((decimal)(CodeFluentPersistence.DefaultDecimalValue)));
                this._conceptionDate = CodeFluentPersistence.GetReaderValue(reader, "Campaign_ConceptionDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._addressedDate = CodeFluentPersistence.GetReaderValue(reader, "Campaign_AddressedDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._propositionDate = CodeFluentPersistence.GetReaderValue(reader, "Campaign_PropositionDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._confirmationDate = CodeFluentPersistence.GetReaderValue(reader, "Campaign_ConfirmationDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.RowVersion) 
                        == 0) 
                        == false))
            {
                this._rowVersion = CodeFluentPersistence.GetReaderValue(reader, "_rowVersion", ((byte[])(null)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this._id = CodeFluentPersistence.GetReaderValue(reader, "Campaign_Id", ((int)(-1)));
            this._rowVersion = CodeFluentPersistence.GetReaderValue(reader, "_rowVersion", ((byte[])(null)));
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.Campaign Load(int id)
        {
            if ((id == -1))
            {
                return null;
            }
            SoftFluent.Json.NET.Campaign campaign = new SoftFluent.Json.NET.Campaign();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "Load");
            persistence.AddParameter("@Id", id, ((int)(-1)));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    campaign.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    campaign.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return campaign;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public static SoftFluent.Json.NET.Campaign LoadByName(string name)
        {
            if ((name == default(string)))
            {
                return null;
            }
            SoftFluent.Json.NET.Campaign campaign = new SoftFluent.Json.NET.Campaign();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "LoadByName");
            persistence.AddParameter("@Name", name, default(string));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    campaign.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    campaign.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return campaign;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((this.Id == -1))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "Load");
            persistence.AddParameter("@Id", this.Id, ((int)(-1)));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "Save");
            persistence.AddParameter("@Campaign_Id", this.Id, ((int)(-1)));
            persistence.AddParameter("@Campaign_Name", this.Name, default(string));
            persistence.AddParameterEnumInt32("@Campaign_State", this.State, SoftFluent.Json.NET.CampaignStateType.Conceived);
            persistence.AddParameter("@Campaign_Customer_Id", this.CustomerId, ((int)(-1)));
            persistence.AddParameter("@Campaign_Price", this.Price, CodeFluentPersistence.DefaultDecimalValue);
            persistence.AddParameter("@Campaign_PriceAllTaxIncluded", this.PriceAllTaxIncluded, CodeFluentPersistence.DefaultDecimalValue);
            persistence.AddParameter("@Campaign_DiscountRate", this.DiscountRate, CodeFluentPersistence.DefaultDecimalValue);
            persistence.AddParameter("@Campaign_ConceptionDate", this.ConceptionDate, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddParameter("@Campaign_AddressedDate", this.AddressedDate, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddParameter("@Campaign_PropositionDate", this.PropositionDate, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddParameter("@Campaign_ConfirmationDate", this.ConfirmationDate, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddParameter("@_trackLastWriteUser", persistence.Context.User.Name);
            persistence.AddParameter("@_rowVersion", this.RowVersion);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(SoftFluent.Json.NET.Campaign campaign)
        {
            if ((campaign == null))
            {
                return false;
            }
            bool ret = campaign.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(SoftFluent.Json.NET.Campaign campaign)
        {
            bool ret = SoftFluent.Json.NET.Campaign.Save(campaign);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(SoftFluent.Json.NET.Campaign campaign)
        {
            if ((campaign == null))
            {
                return false;
            }
            bool ret = campaign.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("Id=");
            writer.Write(this.Id);
            writer.Write(",");
            writer.Write("Name=");
            writer.Write(this.Name);
            writer.Write(",");
            writer.Write("State=");
            writer.Write(this.State);
            writer.Write(",");
            writer.Write("Customer=");
            if ((this._customer != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._customer)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_customerId=");
            writer.Write(this._customerId);
            writer.Write(",");
            writer.Write("Products=");
            if ((this._products != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._products)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("ProductListString=");
            writer.Write(this.ProductListString);
            writer.Write(",");
            writer.Write("Price=");
            writer.Write(this.Price);
            writer.Write(",");
            writer.Write("PriceAllTaxIncluded=");
            writer.Write(this.PriceAllTaxIncluded);
            writer.Write(",");
            writer.Write("DiscountRate=");
            writer.Write(this.DiscountRate);
            writer.Write(",");
            writer.Write("ConceptionDate=");
            writer.Write(this.ConceptionDate);
            writer.Write(",");
            writer.Write("AddressedDate=");
            writer.Write(this.AddressedDate);
            writer.Write(",");
            writer.Write("PropositionDate=");
            writer.Write(this.PropositionDate);
            writer.Write(",");
            writer.Write("ConfirmationDate=");
            writer.Write(this.ConfirmationDate);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.Campaign LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            SoftFluent.Json.NET.Campaign campaign;
            int var = ((int)(ConvertUtilities.ChangeType(key, typeof(int), -1)));
            campaign = SoftFluent.Json.NET.Campaign.Load(var);
            return campaign;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public SoftFluent.Json.NET.Campaign Clone(bool deep)
        {
            SoftFluent.Json.NET.Campaign campaign = new SoftFluent.Json.NET.Campaign();
            this.CopyTo(campaign, deep);
            return campaign;
        }
        
        public SoftFluent.Json.NET.Campaign Clone()
        {
            SoftFluent.Json.NET.Campaign localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("Id") == true))
            {
                this.Id = ((int)(ConvertUtilities.ChangeType(dict["Id"], typeof(int), -1)));
            }
            if ((dict.Contains("Name") == true))
            {
                this.Name = ((string)(ConvertUtilities.ChangeType(dict["Name"], typeof(string), default(string))));
            }
            if ((dict.Contains("ConceptionDate") == true))
            {
                this.ConceptionDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["ConceptionDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("DiscountRate") == true))
            {
                this.DiscountRate = ((decimal)(ConvertUtilities.ChangeType(dict["DiscountRate"], typeof(decimal), CodeFluentPersistence.DefaultDecimalValue)));
            }
            if ((dict.Contains("AddressedDate") == true))
            {
                this.AddressedDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["AddressedDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("ConfirmationDate") == true))
            {
                this.ConfirmationDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["ConfirmationDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("PropositionDate") == true))
            {
                this.PropositionDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["PropositionDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("PriceAllTaxIncluded") == true))
            {
                this.PriceAllTaxIncluded = ((decimal)(ConvertUtilities.ChangeType(dict["PriceAllTaxIncluded"], typeof(decimal), CodeFluentPersistence.DefaultDecimalValue)));
            }
            if ((dict.Contains("State") == true))
            {
                this.State = ((SoftFluent.Json.NET.CampaignStateType)(ConvertUtilities.ChangeType(dict["State"], typeof(SoftFluent.Json.NET.CampaignStateType), SoftFluent.Json.NET.CampaignStateType.Conceived)));
            }
            if ((dict.Contains("Price") == true))
            {
                this.Price = ((decimal)(ConvertUtilities.ChangeType(dict["Price"], typeof(decimal), CodeFluentPersistence.DefaultDecimalValue)));
            }
            if ((dict.Contains("CustomerId") == true))
            {
                this.CustomerId = ((int)(ConvertUtilities.ChangeType(dict["CustomerId"], typeof(int), -1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(SoftFluent.Json.NET.Campaign campaign, bool deep)
        {
            if ((campaign == null))
            {
                throw new System.ArgumentNullException("campaign");
            }
            campaign.Id = this.Id;
            campaign.Name = this.Name;
            campaign.ConceptionDate = this.ConceptionDate;
            campaign.DiscountRate = this.DiscountRate;
            campaign.AddressedDate = this.AddressedDate;
            campaign.ConfirmationDate = this.ConfirmationDate;
            campaign.PropositionDate = this.PropositionDate;
            campaign.PriceAllTaxIncluded = this.PriceAllTaxIncluded;
            campaign.State = this.State;
            campaign.Price = this.Price;
            campaign.CustomerId = this.CustomerId;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, campaign));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["Id"] = this.Id;
            dict["Name"] = this.Name;
            dict["ConceptionDate"] = this.ConceptionDate;
            dict["DiscountRate"] = this.DiscountRate;
            dict["AddressedDate"] = this.AddressedDate;
            dict["ConfirmationDate"] = this.ConfirmationDate;
            dict["PropositionDate"] = this.PropositionDate;
            dict["PriceAllTaxIncluded"] = this.PriceAllTaxIncluded;
            dict["State"] = this.State;
            dict["Price"] = this.Price;
            dict["CustomerId"] = this.CustomerId;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
        
        protected void OnCollectionKeyChanged(string key)
        {
            if ((this.KeyChanged != null))
            {
                this.KeyChanged(this, new CodeFluent.Runtime.Utilities.KeyChangedEventArgs<string>(key));
            }
        }
    }
}
