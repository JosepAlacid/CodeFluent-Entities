//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoftFluent.Json.NET
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Monday, 23 February 2015 11:33.
    // Build:1.0.61214.0803
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0803")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("Count={Count}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.CollectionTypeConverter))]
    public partial class CampaignCollection : System.Collections.IList, System.Collections.ICollection, CodeFluent.Runtime.ICodeFluentSet, System.Collections.Generic.IList<SoftFluent.Json.NET.Campaign>, System.Collections.Generic.ICollection<SoftFluent.Json.NET.Campaign>, System.ComponentModel.IRaiseItemChangedEvents, System.ICloneable, System.ComponentModel.INotifyPropertyChanged, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.IBindingList, System.ComponentModel.ICancelAddNew
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private bool _raiseCollectionChangedEvents = true;
        
        [System.NonSerializedAttribute()]
        private System.Collections.Generic.List<SoftFluent.Json.NET.Campaign> _baseList = new System.Collections.Generic.List<SoftFluent.Json.NET.Campaign>();
        
        [System.NonSerializedAttribute()]
        private System.Collections.Generic.Dictionary<string, SoftFluent.Json.NET.Campaign> _baseTable = new System.Collections.Generic.Dictionary<string, SoftFluent.Json.NET.Campaign>();
        
        [System.NonSerializedAttribute()]
        private System.Collections.Hashtable _relations = new System.Collections.Hashtable();
        
        private int _maxCount = 2147483647;
        
        [System.NonSerializedAttribute()]
        private SoftFluent.Json.NET.Customer _unspecifiedCustomerCustomer;
        
        [System.NonSerializedAttribute()]
        private int _addNewPos = -1;
        
        [System.NonSerializedAttribute()]
        private CodeFluent.Runtime.Utilities.BindingListManager<SoftFluent.Json.NET.Campaign> _blm3386899647;
        
        private bool _raiseListChangedEvents = true;
        
        private System.Collections.Specialized.NotifyCollectionChangedEventHandler _h2943838991;

        event System.Collections.Specialized.NotifyCollectionChangedEventHandler System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged{add{_h2943838991+=value;}remove{_h2943838991-=value;}}
        
        public CampaignCollection()
        {
            this._blm3386899647 = new CodeFluent.Runtime.Utilities.BindingListManager<SoftFluent.Json.NET.Campaign>(this);
        }
        
        public CampaignCollection(SoftFluent.Json.NET.Customer unspecifiedCustomerCustomer)
        {
            this._blm3386899647 = new CodeFluent.Runtime.Utilities.BindingListManager<SoftFluent.Json.NET.Campaign>(this);
            this._unspecifiedCustomerCustomer = unspecifiedCustomerCustomer;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual bool RaiseCollectionChangedEvents
        {
            get
            {
                return this._raiseCollectionChangedEvents;
            }
            set
            {
                this._raiseCollectionChangedEvents = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        protected System.Collections.Generic.List<SoftFluent.Json.NET.Campaign> BaseList
        {
            get
            {
                return this._baseList;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        protected System.Collections.Generic.Dictionary<string, SoftFluent.Json.NET.Campaign> BaseTable
        {
            get
            {
                return this._baseTable;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        System.Collections.IDictionary CodeFluent.Runtime.ICodeFluentSet.Relations
        {
            get
            {
                return this._relations;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        public virtual int MaxCount
        {
            get
            {
                return this._maxCount;
            }
            set
            {
                this._maxCount = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public SoftFluent.Json.NET.Customer UnspecifiedCustomerCustomer
        {
            get
            {
                return this._unspecifiedCustomerCustomer;
            }
        }
        
        public SoftFluent.Json.NET.Campaign this[int index]
        {
            get
            {
                return ((SoftFluent.Json.NET.Campaign)(this.BaseList[index]));
            }
            set
            {
                this.BaseList[index] = value;
            }
        }
        
        object System.Collections.IList.this[int index]
        {
            get
            {
                object i = this.BaseList[index];
                return i;
            }
            set
            {
                this.BaseList[index] = ((SoftFluent.Json.NET.Campaign)(value));
            }
        }
        
        public SoftFluent.Json.NET.Campaign this[string name]
        {
            get
            {
                if ((name == default(string)))
                {
                    throw new System.ArgumentNullException("name");
                }
                SoftFluent.Json.NET.Campaign i = this.TryGetValue(name);
                return i;
            }
            set
            {
                if ((name == default(string)))
                {
                    throw new System.ArgumentNullException("name");
                }
                if ((value == null))
                {
                    SoftFluent.Json.NET.Campaign campaign = this.TryGetValue(name);
                    if ((campaign != null))
                    {
                        this.Remove(campaign);
                    }
                    return;
                }
                SoftFluent.Json.NET.Campaign existing = this.TryGetValue(value.Name);
                if ((existing != null))
                {
                    this.Remove(existing);
                }
                this.Add(value);
            }
        }
        
        public virtual int Count
        {
            get
            {
                int v = ((System.Collections.IList)(this.BaseList)).Count;
                return v;
            }
        }
        
        public virtual bool IsSynchronized
        {
            get
            {
                bool v = ((System.Collections.IList)(this.BaseList)).IsSynchronized;
                return v;
            }
        }
        
        public virtual object SyncRoot
        {
            get
            {
                object v = ((System.Collections.IList)(this.BaseList)).SyncRoot;
                return v;
            }
        }
        
        public virtual bool IsFixedSize
        {
            get
            {
                bool v = ((System.Collections.IList)(this.BaseList)).IsFixedSize;
                return v;
            }
        }
        
        public virtual bool IsReadOnly
        {
            get
            {
                bool v = ((System.Collections.IList)(this.BaseList)).IsReadOnly;
                return v;
            }
        }
        
        public virtual bool RaiseListChangedEvents
        {
            get
            {
                return this._raiseListChangedEvents;
            }
            set
            {
                this._raiseListChangedEvents = value;
            }
        }
        
        bool System.ComponentModel.IBindingList.AllowEdit
        {
            get
            {
                return this._blm3386899647.AllowEdit;
            }
        }
        
        bool System.ComponentModel.IBindingList.AllowNew
        {
            get
            {
                return this._blm3386899647.AllowNew;
            }
        }
        
        bool System.ComponentModel.IBindingList.AllowRemove
        {
            get
            {
                return this._blm3386899647.AllowRemove;
            }
        }
        
        bool System.ComponentModel.IBindingList.IsSorted
        {
            get
            {
                return this._blm3386899647.IsSorted;
            }
        }
        
        System.ComponentModel.ListSortDirection System.ComponentModel.IBindingList.SortDirection
        {
            get
            {
                return this._blm3386899647.SortDirection;
            }
        }
        
        System.ComponentModel.PropertyDescriptor System.ComponentModel.IBindingList.SortProperty
        {
            get
            {
                return this._blm3386899647.SortProperty;
            }
        }
        
        bool System.ComponentModel.IBindingList.SupportsChangeNotification
        {
            get
            {
                return true;
            }
        }
        
        bool System.ComponentModel.IBindingList.SupportsSearching
        {
            get
            {
                return this._blm3386899647.SupportsSearching;
            }
        }
        
        bool System.ComponentModel.IBindingList.SupportsSorting
        {
            get
            {
                return this._blm3386899647.SupportsSorting;
            }
        }
        
        bool System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents
        {
            get
            {
                return this.RaiseListChangedEvents;
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.CollectionChangeEventHandler CollectionChanged;
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.AddingNewEventHandler AddingNew;
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.ListChangedEventHandler ListChanged;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((this.RaiseCollectionChangedEvents == false))
            {
                return;
            }
            if ((this.CollectionChanged != null))
            {
                this.CollectionChanged(this, e);
            }
            CodeFluent.Runtime.ServiceModel.CollectionChangeNotifier.Notify(this, e, this._h2943838991);
            this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Count"));
            this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Item[]"));
        }
        
        protected virtual void Relate(SoftFluent.Json.NET.Campaign item, CodeFluent.Runtime.CodeFluentRelationType relationType)
        {
            ((CodeFluent.Runtime.ICodeFluentSet)(this)).Relations[item] = relationType;
        }
        
        public int Add(SoftFluent.Json.NET.Campaign campaign)
        {
            int localAdd = this.BaseList.Count;
            this.BaseAdd(campaign);
            return localAdd;
        }
        
        protected virtual int BaseAdd(SoftFluent.Json.NET.Campaign campaign)
        {
            if ((campaign == null))
            {
                throw new System.ArgumentNullException("campaign");
            }
            if ((campaign.Id == -1))
            {
                CodeFluent.Runtime.CodeFluentRuntimeException.Throw("invalidEntityKey", "Id", "campaign", "SoftFluent.Json.NET.Campaign");
            }
            try
            {
                this.BaseTable.Add(campaign.Name, campaign);
            }
            catch (System.ArgumentNullException ane)
            {
                throw new System.ArgumentNullException(SoftFluent.Json.NET.Resources.Manager.GetUserMessage(null, CodeFluent.Runtime.UserExceptionType.VoidCollectionKey, "SoftFluent.Json.NET.CampaignCollection", campaign.EntityKey), ane);
            }
            catch (System.ArgumentException ae)
            {
                throw new System.ArgumentException(SoftFluent.Json.NET.Resources.Manager.GetUserMessage(null, CodeFluent.Runtime.UserExceptionType.ItemAlreadyAdded, "SoftFluent.Json.NET.CampaignCollection", campaign.Name), ae);
            }
            campaign.KeyChanged += new System.EventHandler<CodeFluent.Runtime.Utilities.KeyChangedEventArgs<string>>(this.OnItemKeyChanged);
            int localAdd = this.BaseList.Count;
            this.BaseList.Add(campaign);
            this.OnCollectionChanged(new CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Add, campaign, localAdd));
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemAdded, localAdd));
            return localAdd;
        }
        
        int System.Collections.IList.Add(object value)
        {
            SoftFluent.Json.NET.Campaign campaign = null;
            try
            {
                campaign = ((SoftFluent.Json.NET.Campaign)(value));
            }
            catch (System.InvalidCastException )
            {
                string key = null;
                try
                {
                    key = ((string)(value));
                    int count = this.Count;
                    if ((this.AddByEntityKey(key) != null))
                    {
                        return 1;
                    }
                    return 0;
                }
                catch (System.InvalidCastException )
                {
                }
                if ((key == null))
                {
                    throw new System.ArgumentException("value");
                }
            }
            if ((campaign == null))
            {
                throw new System.ArgumentException("value");
            }
            int localAdd = this.Add(campaign);
            return localAdd;
        }
        
        void System.Collections.Generic.ICollection<SoftFluent.Json.NET.Campaign>.Add(SoftFluent.Json.NET.Campaign campaign)
        {
            this.BaseAdd(campaign);
        }
        
        public virtual SoftFluent.Json.NET.Campaign AddByEntityKey(string key)
        {
            SoftFluent.Json.NET.Campaign campaign = SoftFluent.Json.NET.Campaign.LoadByEntityKey(key);
            if (((campaign != null) 
                        && (this.Contains(campaign) == false)))
            {
                this.Add(campaign);
            }
            return campaign;
        }
        
        public void Sort()
        {
            this.Sort(null);
        }
        
        public virtual void Sort(System.Collections.Generic.IComparer<SoftFluent.Json.NET.Campaign> comparer)
        {
            this.BaseList.Sort(comparer);
        }
        
        public void CopyTo(SoftFluent.Json.NET.Campaign[] array, int index)
        {
            this.BaseCopyTo(array, index);
        }
        
        protected virtual void BaseCopyTo(SoftFluent.Json.NET.Campaign[] array, int index)
        {
            this.BaseList.CopyTo(array, index);
        }
        
        void System.Collections.ICollection.CopyTo(System.Array array, int index)
        {
            CodeFluent.Runtime.Utilities.ConvertUtilities.CopyTo(this, array, index);
        }
        
        public bool Contains(SoftFluent.Json.NET.Campaign campaign)
        {
            bool localContains = this.BaseContains(campaign);
            return localContains;
        }
        
        protected virtual bool BaseContains(SoftFluent.Json.NET.Campaign campaign)
        {
            if ((campaign == null))
            {
                return false;
            }
            bool localContains = this.BaseTable.ContainsKey(campaign.Name);
            return localContains;
        }
        
        bool System.Collections.IList.Contains(object value)
        {
            SoftFluent.Json.NET.Campaign campaign;
			campaign = value as SoftFluent.Json.NET.Campaign;
            return this.Contains(campaign);
        }
        
        public int IndexOf(SoftFluent.Json.NET.Campaign campaign)
        {
            int localIndexOf = this.BaseIndexOf(campaign);
            return localIndexOf;
        }
        
        protected virtual int BaseIndexOf(SoftFluent.Json.NET.Campaign campaign)
        {
            if ((campaign == null))
            {
                return -1;
            }
            int localIndexOf = this.BaseList.IndexOf(campaign);
            return localIndexOf;
        }
        
        int System.Collections.IList.IndexOf(object value)
        {
            SoftFluent.Json.NET.Campaign campaign;
			campaign = value as SoftFluent.Json.NET.Campaign;
            return this.IndexOf(campaign);
        }
        
        public void Insert(int index, SoftFluent.Json.NET.Campaign campaign)
        {
            this.BaseInsert(index, campaign);
        }
        
        protected virtual void BaseInsert(int index, SoftFluent.Json.NET.Campaign campaign)
        {
            if ((campaign == null))
            {
                throw new System.ArgumentNullException("campaign");
            }
            try
            {
                this.BaseTable.Add(campaign.Name, campaign);
            }
            catch (System.ArgumentNullException ane)
            {
                throw new System.ArgumentNullException(SoftFluent.Json.NET.Resources.Manager.GetUserMessage(null, CodeFluent.Runtime.UserExceptionType.VoidCollectionKey, "SoftFluent.Json.NET.CampaignCollection", campaign.EntityKey), ane);
            }
            catch (System.ArgumentException ae)
            {
                throw new System.ArgumentException(SoftFluent.Json.NET.Resources.Manager.GetUserMessage(null, CodeFluent.Runtime.UserExceptionType.ItemAlreadyAdded, "SoftFluent.Json.NET.CampaignCollection", campaign.Name), ae);
            }
            this.BaseList.Insert(index, campaign);
            this.OnCollectionChanged(new CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Add, campaign, index));
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemAdded, index));
        }
        
        void System.Collections.IList.Insert(int index, object value)
        {
            SoftFluent.Json.NET.Campaign campaign;
			campaign = value as SoftFluent.Json.NET.Campaign;
            this.Insert(index, campaign);
        }
        
        public virtual void Clear()
        {
            int index;
            int count = this.Count;
            for (index = 0; (index < count); index = (index + 1))
            {
                SoftFluent.Json.NET.Campaign Campaign = this[0];
                this.BaseRemove(Campaign);
            }
            this.OnCollectionChanged(new CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Refresh, null));
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.Reset, -1));
        }
        
        public bool Remove(SoftFluent.Json.NET.Campaign campaign)
        {
            return this.BaseRemove(campaign);
        }
        
        protected virtual bool BaseRemove(SoftFluent.Json.NET.Campaign campaign)
        {
            if ((campaign == null))
            {
                throw new System.ArgumentNullException("campaign");
            }
            int index = this.IndexOf(campaign);
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(((System.ComponentModel.ListChangedType)(CodeFluent.Runtime.Utilities.SortableBindingList<SoftFluent.Json.NET.Campaign>.ListChangedTypeDeleting)), index));
            bool ret;
            ret = this.BaseList.Remove(campaign);
            campaign.KeyChanged -= new System.EventHandler<CodeFluent.Runtime.Utilities.KeyChangedEventArgs<string>>(this.OnItemKeyChanged);
            ret = this.BaseTable.Remove(campaign.Name);
            this.OnCollectionChanged(new CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Remove, campaign, index));
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemDeleted, index));
            return ret;
        }
        
        void System.Collections.IList.Remove(object value)
        {
            SoftFluent.Json.NET.Campaign campaign;
			campaign = value as SoftFluent.Json.NET.Campaign;
            this.Remove(campaign);
        }
        
        public virtual void RemoveAt(int index)
        {
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(((System.ComponentModel.ListChangedType)(CodeFluent.Runtime.Utilities.SortableBindingList<SoftFluent.Json.NET.Campaign>.ListChangedTypeDeleting)), index));
            SoftFluent.Json.NET.Campaign campaign = this.BaseList[index];
            if ((campaign != null))
            {
                campaign.KeyChanged -= new System.EventHandler<CodeFluent.Runtime.Utilities.KeyChangedEventArgs<string>>(this.OnItemKeyChanged);
                this.BaseTable.Remove(campaign.Name);
            }
            this.BaseList.RemoveAt(index);
            this.OnCollectionChanged(new CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Remove, campaign, index));
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemDeleted, index));
        }
        
        public virtual System.Collections.Generic.IEnumerator<SoftFluent.Json.NET.Campaign> GetEnumerator()
        {
            System.Collections.Generic.IEnumerator<SoftFluent.Json.NET.Campaign> e = this.BaseList.GetEnumerator();
            return e;
        }
        
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.BaseList.GetEnumerator();
        }
        
        private SoftFluent.Json.NET.Campaign TryGetValue(string key)
        {
            SoftFluent.Json.NET.Campaign campaign;
            if ((this.BaseTable.TryGetValue(key, out campaign) == true))
            {
                return campaign;
            }
            return null;
        }
        
        public virtual void SaveAll()
        {
            int index;
            for (index = (this.Count - 1); (index >= 0); index = (index - 1))
            {
                SoftFluent.Json.NET.Campaign campaign = this[index];
                campaign.Save();
                if ((campaign.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
                {
                    this.Remove(campaign);
                }
            }
        }
        
        private void LoadAll(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            this._unspecifiedCustomerCustomer = null;
            this.BaseList.Clear();
            this.BaseTable.Clear();
            int count = 0;
            int readCount = 0;
            bool readerRead;
            for (readerRead = reader.Read(); ((readerRead == true) 
                        && ((count < this.MaxCount) 
                        && (count < pageSize))); readerRead = reader.Read())
            {
                readCount = (readCount + 1);
                if ((CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) == true))
                {
                    SoftFluent.Json.NET.Campaign campaign = new SoftFluent.Json.NET.Campaign();
                    ((CodeFluent.Runtime.ICodeFluentEntity)(campaign)).ReadRecord(reader);
                    if ((this.BaseContains(campaign) == false))
                    {
                        this.BaseAdd(campaign);
                        count = (count + 1);
                    }
                    campaign.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadAll(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions)
        {
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            SoftFluent.Json.NET.CampaignCollection ret = new SoftFluent.Json.NET.CampaignCollection();
            System.Data.IDataReader reader = null;
            try
            {
                reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadAll(pageOptions);
                if ((reader == null))
                {
                    return ret;
                }
                ret.LoadAll(pageIndex, pageSize, pageOptions, reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName);
            }
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection LoadAll()
        {
            SoftFluent.Json.NET.CampaignCollection ret = SoftFluent.Json.NET.CampaignCollection.PageLoadAll(int.MinValue, int.MaxValue, null);
            return ret;
        }
        
        public static System.Data.IDataReader PageDataLoadAll(CodeFluent.Runtime.PageOptions pageOptions)
        {
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "LoadAll");
            if ((pageOptions != null))
            {
                System.Collections.IEnumerator enumerator = pageOptions.OrderByArguments.GetEnumerator();
                bool b;
                int index = 0;
                for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
                {
                    CodeFluent.Runtime.OrderByArgument argument = ((CodeFluent.Runtime.OrderByArgument)(enumerator.Current));
                    persistence.AddParameter(string.Format("@_orderBy{0}", index), argument.Name);
                    persistence.AddParameter(string.Format("@_orderByDirection{0}", index), ((int)(argument.Direction)));
                    index = (index + 1);
                }
            }
            System.Data.IDataReader reader = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence.ExecuteReader();
            return reader;
        }
        
        public static System.Data.IDataReader DataLoadAll()
        {
            System.Data.IDataReader reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadAll(null);
            return reader;
        }
        
        private void LoadByPrice(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.Data.IDataReader reader, decimal price)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            this._unspecifiedCustomerCustomer = null;
            this.BaseList.Clear();
            this.BaseTable.Clear();
            int count = 0;
            int readCount = 0;
            bool readerRead;
            for (readerRead = reader.Read(); ((readerRead == true) 
                        && ((count < this.MaxCount) 
                        && (count < pageSize))); readerRead = reader.Read())
            {
                readCount = (readCount + 1);
                if ((CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) == true))
                {
                    SoftFluent.Json.NET.Campaign campaign = new SoftFluent.Json.NET.Campaign();
                    ((CodeFluent.Runtime.ICodeFluentEntity)(campaign)).ReadRecord(reader);
                    if ((this.BaseContains(campaign) == false))
                    {
                        this.BaseAdd(campaign);
                        count = (count + 1);
                    }
                    campaign.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByPrice(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, decimal price)
        {
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            SoftFluent.Json.NET.CampaignCollection ret = new SoftFluent.Json.NET.CampaignCollection();
            System.Data.IDataReader reader = null;
            try
            {
                reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByPrice(pageOptions, price);
                if ((reader == null))
                {
                    return ret;
                }
                ret.LoadByPrice(pageIndex, pageSize, pageOptions, reader, price);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName);
            }
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection LoadByPrice(decimal price)
        {
            SoftFluent.Json.NET.CampaignCollection ret = SoftFluent.Json.NET.CampaignCollection.PageLoadByPrice(int.MinValue, int.MaxValue, null, price);
            return ret;
        }
        
        public static System.Data.IDataReader PageDataLoadByPrice(CodeFluent.Runtime.PageOptions pageOptions, decimal price)
        {
            if ((price == CodeFluentPersistence.DefaultDecimalValue))
            {
                throw new System.ArgumentNullException("price");
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "LoadByPrice");
            persistence.AddParameter("@Price", price, CodeFluentPersistence.DefaultDecimalValue);
            if ((pageOptions != null))
            {
                System.Collections.IEnumerator enumerator = pageOptions.OrderByArguments.GetEnumerator();
                bool b;
                int index = 0;
                for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
                {
                    CodeFluent.Runtime.OrderByArgument argument = ((CodeFluent.Runtime.OrderByArgument)(enumerator.Current));
                    persistence.AddParameter(string.Format("@_orderBy{0}", index), argument.Name);
                    persistence.AddParameter(string.Format("@_orderByDirection{0}", index), ((int)(argument.Direction)));
                    index = (index + 1);
                }
            }
            System.Data.IDataReader reader = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence.ExecuteReader();
            return reader;
        }
        
        public static System.Data.IDataReader DataLoadByPrice(decimal price)
        {
            System.Data.IDataReader reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByPrice(null, price);
            return reader;
        }
        
        private void LoadByState(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.Data.IDataReader reader, SoftFluent.Json.NET.CampaignStateType state)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            this._unspecifiedCustomerCustomer = null;
            this.BaseList.Clear();
            this.BaseTable.Clear();
            int count = 0;
            int readCount = 0;
            bool readerRead;
            for (readerRead = reader.Read(); ((readerRead == true) 
                        && ((count < this.MaxCount) 
                        && (count < pageSize))); readerRead = reader.Read())
            {
                readCount = (readCount + 1);
                if ((CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) == true))
                {
                    SoftFluent.Json.NET.Campaign campaign = new SoftFluent.Json.NET.Campaign();
                    ((CodeFluent.Runtime.ICodeFluentEntity)(campaign)).ReadRecord(reader);
                    if ((this.BaseContains(campaign) == false))
                    {
                        this.BaseAdd(campaign);
                        count = (count + 1);
                    }
                    campaign.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByState(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, SoftFluent.Json.NET.CampaignStateType state)
        {
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            SoftFluent.Json.NET.CampaignCollection ret = new SoftFluent.Json.NET.CampaignCollection();
            System.Data.IDataReader reader = null;
            try
            {
                reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByState(pageOptions, state);
                if ((reader == null))
                {
                    return ret;
                }
                ret.LoadByState(pageIndex, pageSize, pageOptions, reader, state);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName);
            }
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection LoadByState(SoftFluent.Json.NET.CampaignStateType state)
        {
            SoftFluent.Json.NET.CampaignCollection ret = SoftFluent.Json.NET.CampaignCollection.PageLoadByState(int.MinValue, int.MaxValue, null, state);
            return ret;
        }
        
        public static System.Data.IDataReader PageDataLoadByState(CodeFluent.Runtime.PageOptions pageOptions, SoftFluent.Json.NET.CampaignStateType state)
        {
            if ((state == SoftFluent.Json.NET.CampaignStateType.Conceived))
            {
                throw new System.ArgumentNullException("state");
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "LoadByState");
            persistence.AddParameterEnumInt32("@State", state, SoftFluent.Json.NET.CampaignStateType.Conceived);
            if ((pageOptions != null))
            {
                System.Collections.IEnumerator enumerator = pageOptions.OrderByArguments.GetEnumerator();
                bool b;
                int index = 0;
                for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
                {
                    CodeFluent.Runtime.OrderByArgument argument = ((CodeFluent.Runtime.OrderByArgument)(enumerator.Current));
                    persistence.AddParameter(string.Format("@_orderBy{0}", index), argument.Name);
                    persistence.AddParameter(string.Format("@_orderByDirection{0}", index), ((int)(argument.Direction)));
                    index = (index + 1);
                }
            }
            System.Data.IDataReader reader = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence.ExecuteReader();
            return reader;
        }
        
        public static System.Data.IDataReader DataLoadByState(SoftFluent.Json.NET.CampaignStateType state)
        {
            System.Data.IDataReader reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByState(null, state);
            return reader;
        }
        
        private void LoadByCustomer(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.Data.IDataReader reader, SoftFluent.Json.NET.Customer customer)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            CodeFluent.Runtime.CodeFluentEntityState customerState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            if ((customer != null))
            {
                customerState = customer.EntityState;
            }
            this._unspecifiedCustomerCustomer = null;
            this.BaseList.Clear();
            this.BaseTable.Clear();
            int count = 0;
            int readCount = 0;
            bool readerRead;
            for (readerRead = reader.Read(); ((readerRead == true) 
                        && ((count < this.MaxCount) 
                        && (count < pageSize))); readerRead = reader.Read())
            {
                readCount = (readCount + 1);
                if ((CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) == true))
                {
                    SoftFluent.Json.NET.Campaign campaign = new SoftFluent.Json.NET.Campaign();
                    ((CodeFluent.Runtime.ICodeFluentEntity)(campaign)).ReadRecord(reader);
                    if ((this.BaseContains(campaign) == false))
                    {
                        this.BaseAdd(campaign);
                        count = (count + 1);
                    }
                    campaign.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
            if ((customer != null))
            {
                customer.EntityState = customerState;
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByCustomer(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, SoftFluent.Json.NET.Customer customer)
        {
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            SoftFluent.Json.NET.CampaignCollection ret = new SoftFluent.Json.NET.CampaignCollection();
            System.Data.IDataReader reader = null;
            try
            {
                reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByCustomer(pageOptions, customer);
                if ((reader == null))
                {
                    return ret;
                }
                ret.LoadByCustomer(pageIndex, pageSize, pageOptions, reader, customer);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName);
            }
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection LoadByCustomer(SoftFluent.Json.NET.Customer customer)
        {
            SoftFluent.Json.NET.CampaignCollection ret = SoftFluent.Json.NET.CampaignCollection.PageLoadByCustomer(int.MinValue, int.MaxValue, null, customer);
            return ret;
        }
        
        public static System.Data.IDataReader PageDataLoadByCustomer(CodeFluent.Runtime.PageOptions pageOptions, SoftFluent.Json.NET.Customer customer)
        {
            if ((customer == null))
            {
                return null;
            }
            if ((customer.Id == -1))
            {
                CodeFluent.Runtime.CodeFluentRuntimeException.Throw("invalidEntityKey", "Id", "customer", "SoftFluent.Json.NET.Customer");
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "LoadByCustomer");
            persistence.AddParameter("@CustomerId", customer.Id, ((int)(-1)));
            if ((pageOptions != null))
            {
                System.Collections.IEnumerator enumerator = pageOptions.OrderByArguments.GetEnumerator();
                bool b;
                int index = 0;
                for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
                {
                    CodeFluent.Runtime.OrderByArgument argument = ((CodeFluent.Runtime.OrderByArgument)(enumerator.Current));
                    persistence.AddParameter(string.Format("@_orderBy{0}", index), argument.Name);
                    persistence.AddParameter(string.Format("@_orderByDirection{0}", index), ((int)(argument.Direction)));
                    index = (index + 1);
                }
            }
            System.Data.IDataReader reader = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence.ExecuteReader();
            return reader;
        }
        
        public static System.Data.IDataReader DataLoadByCustomer(SoftFluent.Json.NET.Customer customer)
        {
            System.Data.IDataReader reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByCustomer(null, customer);
            return reader;
        }
        
        private void LoadByYear(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.Data.IDataReader reader, int year)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            this._unspecifiedCustomerCustomer = null;
            this.BaseList.Clear();
            this.BaseTable.Clear();
            int count = 0;
            int readCount = 0;
            bool readerRead;
            for (readerRead = reader.Read(); ((readerRead == true) 
                        && ((count < this.MaxCount) 
                        && (count < pageSize))); readerRead = reader.Read())
            {
                readCount = (readCount + 1);
                if ((CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) == true))
                {
                    SoftFluent.Json.NET.Campaign campaign = new SoftFluent.Json.NET.Campaign();
                    ((CodeFluent.Runtime.ICodeFluentEntity)(campaign)).ReadRecord(reader);
                    if ((this.BaseContains(campaign) == false))
                    {
                        this.BaseAdd(campaign);
                        count = (count + 1);
                    }
                    campaign.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByYear(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, int year)
        {
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            SoftFluent.Json.NET.CampaignCollection ret = new SoftFluent.Json.NET.CampaignCollection();
            System.Data.IDataReader reader = null;
            try
            {
                reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByYear(pageOptions, year);
                if ((reader == null))
                {
                    return ret;
                }
                ret.LoadByYear(pageIndex, pageSize, pageOptions, reader, year);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName);
            }
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection LoadByYear(int year)
        {
            SoftFluent.Json.NET.CampaignCollection ret = SoftFluent.Json.NET.CampaignCollection.PageLoadByYear(int.MinValue, int.MaxValue, null, year);
            return ret;
        }
        
        public static System.Data.IDataReader PageDataLoadByYear(CodeFluent.Runtime.PageOptions pageOptions, int year)
        {
            if ((year == CodeFluentPersistence.DefaultInt32Value))
            {
                throw new System.ArgumentNullException("year");
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "LoadByYear");
            persistence.AddParameter("@year", year);
            if ((pageOptions != null))
            {
                System.Collections.IEnumerator enumerator = pageOptions.OrderByArguments.GetEnumerator();
                bool b;
                int index = 0;
                for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
                {
                    CodeFluent.Runtime.OrderByArgument argument = ((CodeFluent.Runtime.OrderByArgument)(enumerator.Current));
                    persistence.AddParameter(string.Format("@_orderBy{0}", index), argument.Name);
                    persistence.AddParameter(string.Format("@_orderByDirection{0}", index), ((int)(argument.Direction)));
                    index = (index + 1);
                }
            }
            System.Data.IDataReader reader = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence.ExecuteReader();
            return reader;
        }
        
        public static System.Data.IDataReader DataLoadByYear(int year)
        {
            System.Data.IDataReader reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByYear(null, year);
            return reader;
        }
        
        private void LoadByCustomerAndYear(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.Data.IDataReader reader, SoftFluent.Json.NET.Customer customer, int year)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            CodeFluent.Runtime.CodeFluentEntityState customerState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            if ((customer != null))
            {
                customerState = customer.EntityState;
            }
            this._unspecifiedCustomerCustomer = null;
            this.BaseList.Clear();
            this.BaseTable.Clear();
            int count = 0;
            int readCount = 0;
            bool readerRead;
            for (readerRead = reader.Read(); ((readerRead == true) 
                        && ((count < this.MaxCount) 
                        && (count < pageSize))); readerRead = reader.Read())
            {
                readCount = (readCount + 1);
                if ((CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) == true))
                {
                    SoftFluent.Json.NET.Campaign campaign = new SoftFluent.Json.NET.Campaign();
                    ((CodeFluent.Runtime.ICodeFluentEntity)(campaign)).ReadRecord(reader);
                    if ((this.BaseContains(campaign) == false))
                    {
                        this.BaseAdd(campaign);
                        count = (count + 1);
                    }
                    campaign.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
            if ((customer != null))
            {
                customer.EntityState = customerState;
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByCustomerAndYear(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, SoftFluent.Json.NET.Customer customer, int year)
        {
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            SoftFluent.Json.NET.CampaignCollection ret = new SoftFluent.Json.NET.CampaignCollection();
            System.Data.IDataReader reader = null;
            try
            {
                reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByCustomerAndYear(pageOptions, customer, year);
                if ((reader == null))
                {
                    return ret;
                }
                ret.LoadByCustomerAndYear(pageIndex, pageSize, pageOptions, reader, customer, year);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName);
            }
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection LoadByCustomerAndYear(SoftFluent.Json.NET.Customer customer, int year)
        {
            SoftFluent.Json.NET.CampaignCollection ret = SoftFluent.Json.NET.CampaignCollection.PageLoadByCustomerAndYear(int.MinValue, int.MaxValue, null, customer, year);
            return ret;
        }
        
        public static System.Data.IDataReader PageDataLoadByCustomerAndYear(CodeFluent.Runtime.PageOptions pageOptions, SoftFluent.Json.NET.Customer customer, int year)
        {
            if ((customer == null))
            {
                return null;
            }
            if ((customer.Id == -1))
            {
                CodeFluent.Runtime.CodeFluentRuntimeException.Throw("invalidEntityKey", "Id", "customer", "SoftFluent.Json.NET.Customer");
            }
            if ((year == CodeFluentPersistence.DefaultInt32Value))
            {
                throw new System.ArgumentNullException("year");
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "LoadByCustomerAndYear");
            persistence.AddParameter("@CustomerId", customer.Id, ((int)(-1)));
            persistence.AddParameter("@year", year);
            if ((pageOptions != null))
            {
                System.Collections.IEnumerator enumerator = pageOptions.OrderByArguments.GetEnumerator();
                bool b;
                int index = 0;
                for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
                {
                    CodeFluent.Runtime.OrderByArgument argument = ((CodeFluent.Runtime.OrderByArgument)(enumerator.Current));
                    persistence.AddParameter(string.Format("@_orderBy{0}", index), argument.Name);
                    persistence.AddParameter(string.Format("@_orderByDirection{0}", index), ((int)(argument.Direction)));
                    index = (index + 1);
                }
            }
            System.Data.IDataReader reader = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence.ExecuteReader();
            return reader;
        }
        
        public static System.Data.IDataReader DataLoadByCustomerAndYear(SoftFluent.Json.NET.Customer customer, int year)
        {
            System.Data.IDataReader reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByCustomerAndYear(null, customer, year);
            return reader;
        }
        
        private void LoadByConceptionDate(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.Data.IDataReader reader, System.DateTime conceptionDate)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            this._unspecifiedCustomerCustomer = null;
            this.BaseList.Clear();
            this.BaseTable.Clear();
            int count = 0;
            int readCount = 0;
            bool readerRead;
            for (readerRead = reader.Read(); ((readerRead == true) 
                        && ((count < this.MaxCount) 
                        && (count < pageSize))); readerRead = reader.Read())
            {
                readCount = (readCount + 1);
                if ((CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) == true))
                {
                    SoftFluent.Json.NET.Campaign campaign = new SoftFluent.Json.NET.Campaign();
                    ((CodeFluent.Runtime.ICodeFluentEntity)(campaign)).ReadRecord(reader);
                    if ((this.BaseContains(campaign) == false))
                    {
                        this.BaseAdd(campaign);
                        count = (count + 1);
                    }
                    campaign.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByConceptionDate(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.DateTime conceptionDate)
        {
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            SoftFluent.Json.NET.CampaignCollection ret = new SoftFluent.Json.NET.CampaignCollection();
            System.Data.IDataReader reader = null;
            try
            {
                reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByConceptionDate(pageOptions, conceptionDate);
                if ((reader == null))
                {
                    return ret;
                }
                ret.LoadByConceptionDate(pageIndex, pageSize, pageOptions, reader, conceptionDate);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName);
            }
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection LoadByConceptionDate(System.DateTime conceptionDate)
        {
            SoftFluent.Json.NET.CampaignCollection ret = SoftFluent.Json.NET.CampaignCollection.PageLoadByConceptionDate(int.MinValue, int.MaxValue, null, conceptionDate);
            return ret;
        }
        
        public static System.Data.IDataReader PageDataLoadByConceptionDate(CodeFluent.Runtime.PageOptions pageOptions, System.DateTime conceptionDate)
        {
            if ((conceptionDate == CodeFluentPersistence.DefaultDateTimeValue))
            {
                throw new System.ArgumentNullException("conceptionDate");
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "LoadByConceptionDate");
            persistence.AddParameter("@ConceptionDate", conceptionDate, CodeFluentPersistence.DefaultDateTimeValue);
            if ((pageOptions != null))
            {
                System.Collections.IEnumerator enumerator = pageOptions.OrderByArguments.GetEnumerator();
                bool b;
                int index = 0;
                for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
                {
                    CodeFluent.Runtime.OrderByArgument argument = ((CodeFluent.Runtime.OrderByArgument)(enumerator.Current));
                    persistence.AddParameter(string.Format("@_orderBy{0}", index), argument.Name);
                    persistence.AddParameter(string.Format("@_orderByDirection{0}", index), ((int)(argument.Direction)));
                    index = (index + 1);
                }
            }
            System.Data.IDataReader reader = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence.ExecuteReader();
            return reader;
        }
        
        public static System.Data.IDataReader DataLoadByConceptionDate(System.DateTime conceptionDate)
        {
            System.Data.IDataReader reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByConceptionDate(null, conceptionDate);
            return reader;
        }
        
        private void LoadByAddressedDate(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.Data.IDataReader reader, System.DateTime addressedDate)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            this._unspecifiedCustomerCustomer = null;
            this.BaseList.Clear();
            this.BaseTable.Clear();
            int count = 0;
            int readCount = 0;
            bool readerRead;
            for (readerRead = reader.Read(); ((readerRead == true) 
                        && ((count < this.MaxCount) 
                        && (count < pageSize))); readerRead = reader.Read())
            {
                readCount = (readCount + 1);
                if ((CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) == true))
                {
                    SoftFluent.Json.NET.Campaign campaign = new SoftFluent.Json.NET.Campaign();
                    ((CodeFluent.Runtime.ICodeFluentEntity)(campaign)).ReadRecord(reader);
                    if ((this.BaseContains(campaign) == false))
                    {
                        this.BaseAdd(campaign);
                        count = (count + 1);
                    }
                    campaign.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByAddressedDate(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.DateTime addressedDate)
        {
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            SoftFluent.Json.NET.CampaignCollection ret = new SoftFluent.Json.NET.CampaignCollection();
            System.Data.IDataReader reader = null;
            try
            {
                reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByAddressedDate(pageOptions, addressedDate);
                if ((reader == null))
                {
                    return ret;
                }
                ret.LoadByAddressedDate(pageIndex, pageSize, pageOptions, reader, addressedDate);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName);
            }
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection LoadByAddressedDate(System.DateTime addressedDate)
        {
            SoftFluent.Json.NET.CampaignCollection ret = SoftFluent.Json.NET.CampaignCollection.PageLoadByAddressedDate(int.MinValue, int.MaxValue, null, addressedDate);
            return ret;
        }
        
        public static System.Data.IDataReader PageDataLoadByAddressedDate(CodeFluent.Runtime.PageOptions pageOptions, System.DateTime addressedDate)
        {
            if ((addressedDate == CodeFluentPersistence.DefaultDateTimeValue))
            {
                throw new System.ArgumentNullException("addressedDate");
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "LoadByAddressedDate");
            persistence.AddParameter("@AddressedDate", addressedDate, CodeFluentPersistence.DefaultDateTimeValue);
            if ((pageOptions != null))
            {
                System.Collections.IEnumerator enumerator = pageOptions.OrderByArguments.GetEnumerator();
                bool b;
                int index = 0;
                for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
                {
                    CodeFluent.Runtime.OrderByArgument argument = ((CodeFluent.Runtime.OrderByArgument)(enumerator.Current));
                    persistence.AddParameter(string.Format("@_orderBy{0}", index), argument.Name);
                    persistence.AddParameter(string.Format("@_orderByDirection{0}", index), ((int)(argument.Direction)));
                    index = (index + 1);
                }
            }
            System.Data.IDataReader reader = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence.ExecuteReader();
            return reader;
        }
        
        public static System.Data.IDataReader DataLoadByAddressedDate(System.DateTime addressedDate)
        {
            System.Data.IDataReader reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByAddressedDate(null, addressedDate);
            return reader;
        }
        
        private void LoadByPropositionDate(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.Data.IDataReader reader, System.DateTime propositionDate)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            this._unspecifiedCustomerCustomer = null;
            this.BaseList.Clear();
            this.BaseTable.Clear();
            int count = 0;
            int readCount = 0;
            bool readerRead;
            for (readerRead = reader.Read(); ((readerRead == true) 
                        && ((count < this.MaxCount) 
                        && (count < pageSize))); readerRead = reader.Read())
            {
                readCount = (readCount + 1);
                if ((CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) == true))
                {
                    SoftFluent.Json.NET.Campaign campaign = new SoftFluent.Json.NET.Campaign();
                    ((CodeFluent.Runtime.ICodeFluentEntity)(campaign)).ReadRecord(reader);
                    if ((this.BaseContains(campaign) == false))
                    {
                        this.BaseAdd(campaign);
                        count = (count + 1);
                    }
                    campaign.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByPropositionDate(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.DateTime propositionDate)
        {
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            SoftFluent.Json.NET.CampaignCollection ret = new SoftFluent.Json.NET.CampaignCollection();
            System.Data.IDataReader reader = null;
            try
            {
                reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByPropositionDate(pageOptions, propositionDate);
                if ((reader == null))
                {
                    return ret;
                }
                ret.LoadByPropositionDate(pageIndex, pageSize, pageOptions, reader, propositionDate);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName);
            }
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection LoadByPropositionDate(System.DateTime propositionDate)
        {
            SoftFluent.Json.NET.CampaignCollection ret = SoftFluent.Json.NET.CampaignCollection.PageLoadByPropositionDate(int.MinValue, int.MaxValue, null, propositionDate);
            return ret;
        }
        
        public static System.Data.IDataReader PageDataLoadByPropositionDate(CodeFluent.Runtime.PageOptions pageOptions, System.DateTime propositionDate)
        {
            if ((propositionDate == CodeFluentPersistence.DefaultDateTimeValue))
            {
                throw new System.ArgumentNullException("propositionDate");
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "LoadByPropositionDate");
            persistence.AddParameter("@PropositionDate", propositionDate, CodeFluentPersistence.DefaultDateTimeValue);
            if ((pageOptions != null))
            {
                System.Collections.IEnumerator enumerator = pageOptions.OrderByArguments.GetEnumerator();
                bool b;
                int index = 0;
                for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
                {
                    CodeFluent.Runtime.OrderByArgument argument = ((CodeFluent.Runtime.OrderByArgument)(enumerator.Current));
                    persistence.AddParameter(string.Format("@_orderBy{0}", index), argument.Name);
                    persistence.AddParameter(string.Format("@_orderByDirection{0}", index), ((int)(argument.Direction)));
                    index = (index + 1);
                }
            }
            System.Data.IDataReader reader = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence.ExecuteReader();
            return reader;
        }
        
        public static System.Data.IDataReader DataLoadByPropositionDate(System.DateTime propositionDate)
        {
            System.Data.IDataReader reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByPropositionDate(null, propositionDate);
            return reader;
        }
        
        private void LoadByConfirmationDate(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.Data.IDataReader reader, System.DateTime confirmationDate)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            this._unspecifiedCustomerCustomer = null;
            this.BaseList.Clear();
            this.BaseTable.Clear();
            int count = 0;
            int readCount = 0;
            bool readerRead;
            for (readerRead = reader.Read(); ((readerRead == true) 
                        && ((count < this.MaxCount) 
                        && (count < pageSize))); readerRead = reader.Read())
            {
                readCount = (readCount + 1);
                if ((CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) == true))
                {
                    SoftFluent.Json.NET.Campaign campaign = new SoftFluent.Json.NET.Campaign();
                    ((CodeFluent.Runtime.ICodeFluentEntity)(campaign)).ReadRecord(reader);
                    if ((this.BaseContains(campaign) == false))
                    {
                        this.BaseAdd(campaign);
                        count = (count + 1);
                    }
                    campaign.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByConfirmationDate(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.DateTime confirmationDate)
        {
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            SoftFluent.Json.NET.CampaignCollection ret = new SoftFluent.Json.NET.CampaignCollection();
            System.Data.IDataReader reader = null;
            try
            {
                reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByConfirmationDate(pageOptions, confirmationDate);
                if ((reader == null))
                {
                    return ret;
                }
                ret.LoadByConfirmationDate(pageIndex, pageSize, pageOptions, reader, confirmationDate);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName);
            }
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection LoadByConfirmationDate(System.DateTime confirmationDate)
        {
            SoftFluent.Json.NET.CampaignCollection ret = SoftFluent.Json.NET.CampaignCollection.PageLoadByConfirmationDate(int.MinValue, int.MaxValue, null, confirmationDate);
            return ret;
        }
        
        public static System.Data.IDataReader PageDataLoadByConfirmationDate(CodeFluent.Runtime.PageOptions pageOptions, System.DateTime confirmationDate)
        {
            if ((confirmationDate == CodeFluentPersistence.DefaultDateTimeValue))
            {
                throw new System.ArgumentNullException("confirmationDate");
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Campaign", "LoadByConfirmationDate");
            persistence.AddParameter("@ConfirmationDate", confirmationDate, CodeFluentPersistence.DefaultDateTimeValue);
            if ((pageOptions != null))
            {
                System.Collections.IEnumerator enumerator = pageOptions.OrderByArguments.GetEnumerator();
                bool b;
                int index = 0;
                for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
                {
                    CodeFluent.Runtime.OrderByArgument argument = ((CodeFluent.Runtime.OrderByArgument)(enumerator.Current));
                    persistence.AddParameter(string.Format("@_orderBy{0}", index), argument.Name);
                    persistence.AddParameter(string.Format("@_orderByDirection{0}", index), ((int)(argument.Direction)));
                    index = (index + 1);
                }
            }
            System.Data.IDataReader reader = CodeFluentContext.Get(SoftFluent.Json.NET.Constants.SoftFluent_Json_NETStoreName).Persistence.ExecuteReader();
            return reader;
        }
        
        public static System.Data.IDataReader DataLoadByConfirmationDate(System.DateTime confirmationDate)
        {
            System.Data.IDataReader reader = SoftFluent.Json.NET.CampaignCollection.PageDataLoadByConfirmationDate(null, confirmationDate);
            return reader;
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write(string.Concat("Count=", this.Count));
            writer.Write("]");
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        public virtual void CopyTo(SoftFluent.Json.NET.CampaignCollection collection, bool deep)
        {
            if ((typeof(System.ICloneable).IsAssignableFrom(typeof(SoftFluent.Json.NET.Campaign)) == false))
            {
                deep = false;
            }
            System.Collections.Generic.IEnumerator<SoftFluent.Json.NET.Campaign> enumerator = this.GetEnumerator();
            bool b;
            for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
            {
                if ((deep == true))
                {
                    collection.Add(((SoftFluent.Json.NET.Campaign)(((System.ICloneable)(enumerator.Current)).Clone())));
                }
                else
                {
                    collection.Add(enumerator.Current);
                }
            }
        }
        
        public virtual SoftFluent.Json.NET.CampaignCollection Clone(bool deep)
        {
            SoftFluent.Json.NET.CampaignCollection ret = new SoftFluent.Json.NET.CampaignCollection();
            this.CopyTo(ret, deep);
            return ret;
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone(true);
        }
        
        public virtual void CancelNew(int index)
        {
            if (((this._addNewPos >= 0) 
                        && (this._addNewPos == index)))
            {
                this.RemoveAt(index);
                this._addNewPos = -1;
            }
        }
        
        public virtual void EndNew(int index)
        {
            if (((this._addNewPos >= 0) 
                        && (this._addNewPos == index)))
            {
                this._addNewPos = -1;
            }
        }
        
        void System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor property)
        {
            this._blm3386899647.AddIndex(property);
        }
        
        protected virtual void OnAddingNew(System.ComponentModel.AddingNewEventArgs e)
        {
            if ((this.AddingNew != null))
            {
                this.AddingNew(this, e);
            }
        }
        
        object System.ComponentModel.IBindingList.AddNew()
        {
            SoftFluent.Json.NET.Campaign add = new SoftFluent.Json.NET.Campaign();
            System.ComponentModel.AddingNewEventArgs e = new System.ComponentModel.AddingNewEventArgs(add);
            this.OnAddingNew(e);
            add = ((SoftFluent.Json.NET.Campaign)(e.NewObject));
            if ((add == null))
            {
                add = new SoftFluent.Json.NET.Campaign();
            }
            add.Name = "AutoNewKey";
            add.Id = 0;
            this._addNewPos = this.Add(add);
            return add;
        }
        
        void System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor property, System.ComponentModel.ListSortDirection direction)
        {
            this._blm3386899647.ApplySort(property, direction);
        }
        
        int System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor property, object key)
        {
            return this._blm3386899647.Find(property, key);
        }
        
        void System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor property)
        {
            this._blm3386899647.RemoveIndex(property);
        }
        
        void System.ComponentModel.IBindingList.RemoveSort()
        {
            this._blm3386899647.RemoveSort();
        }
        
        protected virtual void OnListChanged(System.ComponentModel.ListChangedEventArgs e)
        {
            if ((e == null))
            {
                throw new System.ArgumentNullException("e");
            }
            if ((this.RaiseListChangedEvents == false))
            {
                return;
            }
            if ((((e.ListChangedType == System.ComponentModel.ListChangedType.Reset) 
                        == false) 
                        && (e.NewIndex < 0)))
            {
                return;
            }
            if ((this.ListChanged != null))
            {
                this.ListChanged(this, e);
            }
        }
        
        public void AddRange(System.Collections.Generic.IEnumerable<SoftFluent.Json.NET.Campaign> collection)
        {
            CodeFluent.Runtime.Utilities.ConvertUtilities.AddRange(this, collection);
        }
        
        private void OnItemKeyChanged(object sender, CodeFluent.Runtime.Utilities.KeyChangedEventArgs<string> e)
        {
            if ((e == null))
            {
                throw new System.ArgumentNullException("e");
            }
            if ((e.OldKey == null))
            {
                return;
            }
            SoftFluent.Json.NET.Campaign existing;
            if ((this.BaseTable.TryGetValue(e.OldKey, out existing) == false))
            {
                return;
            }
            if (((sender != null) 
                        && (typeof(CodeFluent.Runtime.Utilities.IKeyable<string>).IsAssignableFrom(sender.GetType()) == true)))
            {
                CodeFluent.Runtime.Utilities.IKeyable<string> item = ((CodeFluent.Runtime.Utilities.IKeyable<string>)(sender));
                try
                {
                    this.BaseTable.Add(item.Key, existing);
                }
                catch (System.ArgumentNullException ane)
                {
                    throw new System.ArgumentNullException(SoftFluent.Json.NET.Resources.Manager.GetUserMessage(null, CodeFluent.Runtime.UserExceptionType.VoidCollectionKey, "SoftFluent.Json.NET.CampaignCollection", ((CodeFluent.Runtime.ICodeFluentEntity)(item)).EntityKey), ane);
                }
                catch (System.ArgumentException ae)
                {
                    throw new System.ArgumentException(SoftFluent.Json.NET.Resources.Manager.GetUserMessage(null, CodeFluent.Runtime.UserExceptionType.ItemAlreadyAdded, "SoftFluent.Json.NET.CampaignCollection", item.Key), ae);
                }
                this.BaseTable.Remove(e.OldKey);
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadAll(int pageIndex, int pageSize)
        {
            return SoftFluent.Json.NET.CampaignCollection.PageLoadAll(pageIndex, pageSize, null);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByPrice(int pageIndex, int pageSize, decimal price)
        {
            return SoftFluent.Json.NET.CampaignCollection.PageLoadByPrice(pageIndex, pageSize, null, price);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByState(int pageIndex, int pageSize, SoftFluent.Json.NET.CampaignStateType state)
        {
            return SoftFluent.Json.NET.CampaignCollection.PageLoadByState(pageIndex, pageSize, null, state);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByCustomer(int pageIndex, int pageSize, int customerId)
        {
            SoftFluent.Json.NET.Customer customer = SoftFluent.Json.NET.Customer.Load(customerId);
            if ((customer == null))
            {
                return new SoftFluent.Json.NET.CampaignCollection();
            }
            return SoftFluent.Json.NET.CampaignCollection.PageLoadByCustomer(pageIndex, pageSize, null, customer);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByYear(int pageIndex, int pageSize, int year)
        {
            return SoftFluent.Json.NET.CampaignCollection.PageLoadByYear(pageIndex, pageSize, null, year);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByCustomerAndYear(int pageIndex, int pageSize, int customerId, int year)
        {
            SoftFluent.Json.NET.Customer customer = SoftFluent.Json.NET.Customer.Load(customerId);
            if ((customer == null))
            {
                return new SoftFluent.Json.NET.CampaignCollection();
            }
            return SoftFluent.Json.NET.CampaignCollection.PageLoadByCustomerAndYear(pageIndex, pageSize, null, customer, year);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByConceptionDate(int pageIndex, int pageSize, System.DateTime conceptionDate)
        {
            return SoftFluent.Json.NET.CampaignCollection.PageLoadByConceptionDate(pageIndex, pageSize, null, conceptionDate);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByAddressedDate(int pageIndex, int pageSize, System.DateTime addressedDate)
        {
            return SoftFluent.Json.NET.CampaignCollection.PageLoadByAddressedDate(pageIndex, pageSize, null, addressedDate);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByPropositionDate(int pageIndex, int pageSize, System.DateTime propositionDate)
        {
            return SoftFluent.Json.NET.CampaignCollection.PageLoadByPropositionDate(pageIndex, pageSize, null, propositionDate);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static SoftFluent.Json.NET.CampaignCollection PageLoadByConfirmationDate(int pageIndex, int pageSize, System.DateTime confirmationDate)
        {
            return SoftFluent.Json.NET.CampaignCollection.PageLoadByConfirmationDate(pageIndex, pageSize, null, confirmationDate);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(SoftFluent.Json.NET.Campaign campaign)
        {
            if ((campaign == null))
            {
                return false;
            }
            bool ret = campaign.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(SoftFluent.Json.NET.Campaign campaign)
        {
            bool ret = SoftFluent.Json.NET.Campaign.Save(campaign);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(SoftFluent.Json.NET.Campaign campaign)
        {
            if ((campaign == null))
            {
                return false;
            }
            bool ret = campaign.Delete();
            return ret;
        }
    }
}
