//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoftFluent.Samples.AngularJs.Services
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated Tuesday, 03 February 2015 11:18.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0786")]
    public partial class CustomerService : SoftFluent.Samples.AngularJs.Services.ICustomerService
    {
        
        static CustomerService()
        {
            CodeFluent.Runtime.Model.EntityDescriptor entityDescriptor = CodeFluent.Runtime.Model.ProjectDescriptor.Current.GetEntityDescriptor(typeof(SoftFluent.Samples.AngularJs.Customer), true);
            CodeFluent.Runtime.Model.ViewDescriptor viewDescriptor;
            CodeFluent.Runtime.Model.ViewPropertyDescriptor propertyDescriptor;
            viewDescriptor = new CodeFluent.Runtime.Model.ViewDescriptor(entityDescriptor, "default", CodeFluent.Runtime.Model.ViewDescriptorOptions.None);
            propertyDescriptor = new CodeFluent.Runtime.Model.ViewPropertyDescriptor(viewDescriptor, "Id", typeof(System.Guid), CodeFluent.Runtime.Model.ViewPropertyDescriptorOptions.IsKey);
            propertyDescriptor.Format = "N";
            propertyDescriptor = new CodeFluent.Runtime.Model.ViewPropertyDescriptor(viewDescriptor, "FirstName", typeof(string), CodeFluent.Runtime.Model.ViewPropertyDescriptorOptions.None);
            propertyDescriptor = new CodeFluent.Runtime.Model.ViewPropertyDescriptor(viewDescriptor, "LastName", typeof(string), CodeFluent.Runtime.Model.ViewPropertyDescriptorOptions.None);
            propertyDescriptor = new CodeFluent.Runtime.Model.ViewPropertyDescriptor(viewDescriptor, "DateOfBirth", typeof(System.DateTime), CodeFluent.Runtime.Model.ViewPropertyDescriptorOptions.None);
            propertyDescriptor = new CodeFluent.Runtime.Model.ViewPropertyDescriptor(viewDescriptor, "PassportNumber", typeof(string), CodeFluent.Runtime.Model.ViewPropertyDescriptorOptions.None);
            propertyDescriptor = new CodeFluent.Runtime.Model.ViewPropertyDescriptor(viewDescriptor, "Orders", typeof(SoftFluent.Samples.AngularJs.OrderCollection), CodeFluent.Runtime.Model.ViewPropertyDescriptorOptions.IsCollection);
        }
        
        public virtual string Validate(SoftFluent.Samples.AngularJs.Customer customer, string culture)
        {
            System.Globalization.CultureInfo cultureInfo = ConvertUtilities.ToCultureInfo(culture);
            SoftFluent.Samples.AngularJs.Customer customer1 = customer;
            if ((customer1 == null))
            {
                return default(string);
            }
            return customer1.Validate(cultureInfo);
        }
        
        public virtual bool Delete(SoftFluent.Samples.AngularJs.Customer customer)
        {
            SoftFluent.Samples.AngularJs.Customer customer1 = customer;
            if ((customer1 == null))
            {
                return CodeFluentPersistence.DefaultBooleanValue;
            }
            return customer1.Delete();
        }
        
        public virtual SoftFluent.Samples.AngularJs.Customer Load(System.Guid id)
        {
            return SoftFluent.Samples.AngularJs.Customer.Load(id);
        }
        
        public virtual SoftFluent.Samples.AngularJs.Customer LoadById(System.Guid id)
        {
            return SoftFluent.Samples.AngularJs.Customer.LoadById(id);
        }
        
        public virtual bool Save(SoftFluent.Samples.AngularJs.Customer customer)
        {
            SoftFluent.Samples.AngularJs.Customer customer1 = customer;
            if ((customer1 == null))
            {
                return CodeFluentPersistence.DefaultBooleanValue;
            }
            return customer1.Save();
        }
        
        public virtual SoftFluent.Samples.AngularJs.Customer LoadByEntityKey(string key)
        {
            return SoftFluent.Samples.AngularJs.Customer.LoadByEntityKey(key);
        }
        
        public virtual bool DeleteByKey(System.Guid id)
        {
            SoftFluent.Samples.AngularJs.Customer customer = SoftFluent.Samples.AngularJs.Customer.Load(id);
            if ((customer == null))
            {
                return CodeFluentPersistence.DefaultBooleanValue;
            }
            return customer.Delete();
        }
        
        public virtual void SaveAll(SoftFluent.Samples.AngularJs.CustomerCollection customerCollection)
        {
            SoftFluent.Samples.AngularJs.CustomerCollection customerCollection1 = customerCollection;
            customerCollection1.SaveAll();
        }
        
        public virtual SoftFluent.Samples.AngularJs.CustomerCollection PageLoadAll(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions)
        {
            return SoftFluent.Samples.AngularJs.CustomerCollection.PageLoadAll(pageIndex, pageSize, pageOptions);
        }
        
        public virtual SoftFluent.Samples.AngularJs.CustomerCollection LoadAll()
        {
            return SoftFluent.Samples.AngularJs.CustomerCollection.LoadAll();
        }
        
        public virtual System.IO.Stream JsonGet(CodeFluent.Runtime.Model.ProjectInvokeOptions options)
        {
            if ((options == null))
            {
                options = new CodeFluent.Runtime.Model.ProjectInvokeOptions();
            }
            options.EntityType = typeof(SoftFluent.Samples.AngularJs.Customer);
            return CodeFluent.Runtime.Model.ProjectDescriptor.JsonGet(options);
        }
        
        public virtual System.IO.Stream JsonPost(System.IO.Stream data)
        {
            CodeFluent.Runtime.Model.ProjectInvokeOptions options = CodeFluent.Runtime.Model.ProjectInvokeOptions.GetFromRequestUri();
            options.EntityType = typeof(SoftFluent.Samples.AngularJs.Customer);
            return CodeFluent.Runtime.Model.ProjectDescriptor.JsonPost(options, data);
        }
    }
}
