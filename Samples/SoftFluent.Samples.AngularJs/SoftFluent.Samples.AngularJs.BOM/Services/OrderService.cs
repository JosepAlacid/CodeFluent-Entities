//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoftFluent.Samples.AngularJs.Services
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated Tuesday, 03 February 2015 11:18.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0786")]
    public partial class OrderService : SoftFluent.Samples.AngularJs.Services.IOrderService
    {
        
        static OrderService()
        {
            CodeFluent.Runtime.Model.EntityDescriptor entityDescriptor = CodeFluent.Runtime.Model.ProjectDescriptor.Current.GetEntityDescriptor(typeof(SoftFluent.Samples.AngularJs.Order), true);
            CodeFluent.Runtime.Model.ViewDescriptor viewDescriptor;
            CodeFluent.Runtime.Model.ViewPropertyDescriptor propertyDescriptor;
            viewDescriptor = new CodeFluent.Runtime.Model.ViewDescriptor(entityDescriptor, "default", CodeFluent.Runtime.Model.ViewDescriptorOptions.None);
            propertyDescriptor = new CodeFluent.Runtime.Model.ViewPropertyDescriptor(viewDescriptor, "Id", typeof(System.Guid), CodeFluent.Runtime.Model.ViewPropertyDescriptorOptions.IsKey);
            propertyDescriptor.Format = "N";
            propertyDescriptor = new CodeFluent.Runtime.Model.ViewPropertyDescriptor(viewDescriptor, "Customer", typeof(SoftFluent.Samples.AngularJs.Customer), CodeFluent.Runtime.Model.ViewPropertyDescriptorOptions.IsEntity);
            propertyDescriptor = new CodeFluent.Runtime.Model.ViewPropertyDescriptor(viewDescriptor, "Products", typeof(SoftFluent.Samples.AngularJs.ReferenceData.ProductCollection), CodeFluent.Runtime.Model.ViewPropertyDescriptorOptions.IsCollection);
            propertyDescriptor = new CodeFluent.Runtime.Model.ViewPropertyDescriptor(viewDescriptor, "Date", typeof(System.DateTime), CodeFluent.Runtime.Model.ViewPropertyDescriptorOptions.None);
        }
        
        public virtual string Validate(SoftFluent.Samples.AngularJs.Order order, string culture)
        {
            System.Globalization.CultureInfo cultureInfo = ConvertUtilities.ToCultureInfo(culture);
            SoftFluent.Samples.AngularJs.Order order1 = order;
            if ((order1 == null))
            {
                return default(string);
            }
            return order1.Validate(cultureInfo);
        }
        
        public virtual bool Delete(SoftFluent.Samples.AngularJs.Order order)
        {
            SoftFluent.Samples.AngularJs.Order order1 = order;
            if ((order1 == null))
            {
                return CodeFluentPersistence.DefaultBooleanValue;
            }
            return order1.Delete();
        }
        
        public virtual SoftFluent.Samples.AngularJs.Order Load(System.Guid id)
        {
            return SoftFluent.Samples.AngularJs.Order.Load(id);
        }
        
        public virtual SoftFluent.Samples.AngularJs.Order LoadById(System.Guid id)
        {
            return SoftFluent.Samples.AngularJs.Order.LoadById(id);
        }
        
        public virtual bool Save(SoftFluent.Samples.AngularJs.Order order)
        {
            SoftFluent.Samples.AngularJs.Order order1 = order;
            if ((order1 == null))
            {
                return CodeFluentPersistence.DefaultBooleanValue;
            }
            return order1.Save();
        }
        
        public virtual SoftFluent.Samples.AngularJs.Order LoadByEntityKey(string key)
        {
            return SoftFluent.Samples.AngularJs.Order.LoadByEntityKey(key);
        }
        
        public virtual bool DeleteByKey(System.Guid id)
        {
            SoftFluent.Samples.AngularJs.Order order = SoftFluent.Samples.AngularJs.Order.Load(id);
            if ((order == null))
            {
                return CodeFluentPersistence.DefaultBooleanValue;
            }
            return order.Delete();
        }
        
        public virtual void SaveAll(SoftFluent.Samples.AngularJs.OrderCollection orderCollection)
        {
            SoftFluent.Samples.AngularJs.OrderCollection orderCollection1 = orderCollection;
            orderCollection1.SaveAll();
        }
        
        public virtual SoftFluent.Samples.AngularJs.OrderCollection PageLoadAll(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions)
        {
            return SoftFluent.Samples.AngularJs.OrderCollection.PageLoadAll(pageIndex, pageSize, pageOptions);
        }
        
        public virtual SoftFluent.Samples.AngularJs.OrderCollection LoadAll()
        {
            return SoftFluent.Samples.AngularJs.OrderCollection.LoadAll();
        }
        
        public virtual SoftFluent.Samples.AngularJs.OrderCollection PageLoadByCustomer(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, string customerEntityKey)
        {
            if ((customerEntityKey == null))
            {
                throw new System.ArgumentNullException("customerEntityKey");
            }
            SoftFluent.Samples.AngularJs.Customer customer = SoftFluent.Samples.AngularJs.Customer.LoadByEntityKey(customerEntityKey);
            return SoftFluent.Samples.AngularJs.OrderCollection.PageLoadByCustomer(pageIndex, pageSize, pageOptions, customer);
        }
        
        public virtual SoftFluent.Samples.AngularJs.OrderCollection LoadByCustomer(string customerEntityKey)
        {
            if ((customerEntityKey == null))
            {
                throw new System.ArgumentNullException("customerEntityKey");
            }
            SoftFluent.Samples.AngularJs.Customer customer = SoftFluent.Samples.AngularJs.Customer.LoadByEntityKey(customerEntityKey);
            return SoftFluent.Samples.AngularJs.OrderCollection.LoadByCustomer(customer);
        }
        
        public virtual SoftFluent.Samples.AngularJs.OrderCollection PageLoadOrdersProductsByProduct(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, string productEntityKey)
        {
            if ((productEntityKey == null))
            {
                throw new System.ArgumentNullException("productEntityKey");
            }
            SoftFluent.Samples.AngularJs.ReferenceData.Product product = SoftFluent.Samples.AngularJs.ReferenceData.Product.LoadByEntityKey(productEntityKey);
            return SoftFluent.Samples.AngularJs.OrderCollection.PageLoadOrdersProductsByProduct(pageIndex, pageSize, pageOptions, product);
        }
        
        public virtual SoftFluent.Samples.AngularJs.OrderCollection LoadOrdersProductsByProduct(string productEntityKey)
        {
            if ((productEntityKey == null))
            {
                throw new System.ArgumentNullException("productEntityKey");
            }
            SoftFluent.Samples.AngularJs.ReferenceData.Product product = SoftFluent.Samples.AngularJs.ReferenceData.Product.LoadByEntityKey(productEntityKey);
            return SoftFluent.Samples.AngularJs.OrderCollection.LoadOrdersProductsByProduct(product);
        }
        
        public virtual System.IO.Stream JsonGet(CodeFluent.Runtime.Model.ProjectInvokeOptions options)
        {
            if ((options == null))
            {
                options = new CodeFluent.Runtime.Model.ProjectInvokeOptions();
            }
            options.EntityType = typeof(SoftFluent.Samples.AngularJs.Order);
            return CodeFluent.Runtime.Model.ProjectDescriptor.JsonGet(options);
        }
        
        public virtual System.IO.Stream JsonPost(System.IO.Stream data)
        {
            CodeFluent.Runtime.Model.ProjectInvokeOptions options = CodeFluent.Runtime.Model.ProjectInvokeOptions.GetFromRequestUri();
            options.EntityType = typeof(SoftFluent.Samples.AngularJs.Order);
            return CodeFluent.Runtime.Model.ProjectDescriptor.JsonPost(options, data);
        }
    }
}
